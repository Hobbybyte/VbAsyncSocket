Attribute VB_Name = "mdTlsCrypto"
'=========================================================================
'
' Elliptic-curve cryptography thunks based on the following sources
'
'  1. https://github.com/esxgx/easy-ecc by Kenneth MacKay
'     BSD 2-clause license
'
'  2. https://github.com/ctz/cifra by Joseph Birr-Pixton
'     CC0 1.0 Universal license
'
'=========================================================================
Option Explicit
DefObj A-Z

#Const ImplUseLibSodium = False
#Const ImplUseBCrypt = False

'=========================================================================
' API
'=========================================================================

'--- for thunks
Private Const MEM_COMMIT                    As Long = &H1000
Private Const PAGE_EXECUTE_READWRITE        As Long = &H40
'--- for CryptAcquireContext
Private Const PROV_RSA_FULL                 As Long = 1
Private Const CRYPT_VERIFYCONTEXT           As Long = &HF0000000
#If ImplUseBCrypt Then
    Private Const BCRYPT_SECP256R1_PRIVATE_KEY_SIZE     As Long = 3 * 32
    Private Const BCRYPT_SECP256R1_PUBLIC_KEY_SIZE      As Long = 1 + 2 * 32 '-- including the header
    Private Const BCRYPT_SECP256R1_PUBKEY_UNCOMPRESSED  As Long = 4
    Private Const BCRYPT_ECDH_PUBLIC_P256_MAGIC         As Long = &H314B4345
    Private Const BCRYPT_ECDH_PRIVATE_P256_MAGIC        As Long = &H324B4345
#End If

Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
Private Declare Sub FillMemory Lib "kernel32" Alias "RtlFillMemory" (Destination As Any, ByVal Length As Long, ByVal Fill As Byte)
Private Declare Function ArrPtr Lib "msvbvm60" Alias "VarPtr" (Ptr() As Any) As Long
Private Declare Function VirtualAlloc Lib "kernel32" (ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long
Private Declare Function VirtualProtect Lib "kernel32" (ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flNewProtect As Long, ByRef lpflOldProtect As Long) As Long
Private Declare Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleA" (ByVal lpModuleName As String) As Long
Private Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal lpLibFileName As String) As Long
Private Declare Function CryptAcquireContext Lib "advapi32" Alias "CryptAcquireContextW" (phProv As Long, ByVal pszContainer As Long, ByVal pszProvider As Long, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long
'Private Declare Function CryptReleaseContext Lib "advapi32" (ByVal hProv As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptGenRandom Lib "advapi32" (ByVal hProv As Long, ByVal dwLen As Long, ByVal pbBuffer As Long) As Long
#If ImplUseLibSodium Then
    '--- libsodium
    Private Declare Function sodium_init Lib "libsodium" () As Long
    Private Declare Function randombytes_buf Lib "libsodium" (lpOut As Any, ByVal lSize As Long) As Long
    Private Declare Function crypto_scalarmult_curve25519 Lib "libsodium" (lpOut As Any, lpConstN As Any, lpConstP As Any) As Long
    Private Declare Function crypto_scalarmult_curve25519_base Lib "libsodium" (lpOut As Any, lpConstN As Any) As Long
    Private Declare Function crypto_hash_sha256 Lib "libsodium" (lpOut As Any, lpConstIn As Any, ByVal lSize As Long, Optional ByVal lHighSize As Long) As Long
    Private Declare Function crypto_hash_sha256_init Lib "libsodium" (lpState As Any) As Long
    Private Declare Function crypto_hash_sha256_update Lib "libsodium" (lpState As Any, lpConstIn As Any, ByVal lSize As Long, Optional ByVal lHighSize As Long) As Long
    Private Declare Function crypto_hash_sha256_final Lib "libsodium" (lpState As Any, lpOut As Any) As Long
    Private Declare Function crypto_hash_sha512_init Lib "libsodium" (lpState As Any) As Long
    Private Declare Function crypto_hash_sha512_update Lib "libsodium" (lpState As Any, lpConstIn As Any, ByVal lSize As Long, Optional ByVal lHighSize As Long) As Long
    Private Declare Function crypto_hash_sha512_final Lib "libsodium" (lpState As Any, lpOut As Any) As Long
    Private Declare Function crypto_aead_chacha20poly1305_ietf_decrypt Lib "libsodium" (lpOut As Any, lOutSize As Any, ByVal nSec As Long, lConstIn As Any, ByVal lInSize As Long, ByVal lHighInSize As Long, lpConstAd As Any, ByVal lAdSize As Long, ByVal lHighAdSize As Long, lpConstNonce As Any, lpConstKey As Any) As Long
    Private Declare Function crypto_aead_chacha20poly1305_ietf_encrypt Lib "libsodium" (lpOut As Any, lOutSize As Any, lConstIn As Any, ByVal lInSize As Long, ByVal lHighInSize As Long, lpConstAd As Any, ByVal lAdSize As Long, ByVal lHighAdSize As Long, ByVal nSec As Long, lpConstNonce As Any, lpConstKey As Any) As Long
    Private Declare Function crypto_aead_aes256gcm_is_available Lib "libsodium" () As Long
    Private Declare Function crypto_aead_aes256gcm_decrypt Lib "libsodium" (lpOut As Any, lOutSize As Any, ByVal nSec As Long, lConstIn As Any, ByVal lInSize As Long, ByVal lHighInSize As Long, lpConstAd As Any, ByVal lAdSize As Long, ByVal lHighAdSize As Long, lpConstNonce As Any, lpConstKey As Any) As Long
    Private Declare Function crypto_aead_aes256gcm_encrypt Lib "libsodium" (lpOut As Any, lOutSize As Any, lConstIn As Any, ByVal lInSize As Long, ByVal lHighInSize As Long, lpConstAd As Any, ByVal lAdSize As Long, ByVal lHighAdSize As Long, ByVal nSec As Long, lpConstNonce As Any, lpConstKey As Any) As Long
#End If
#If ImplUseBCrypt Then
    '--- BCrypt
    Private Declare Function BCryptOpenAlgorithmProvider Lib "bcrypt" (ByRef hAlgorithm As Long, ByVal pszAlgId As Long, ByVal pszImplementation As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptCloseAlgorithmProvider Lib "bcrypt" (ByVal hAlgorithm As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptImportKeyPair Lib "bcrypt" (ByVal hAlgorithm As Long, ByVal hImportKey As Long, ByVal pszBlobType As Long, ByRef hKey As Long, ByVal pbInput As Long, ByVal cbInput As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptExportKey Lib "bcrypt" (ByVal hKey As Long, ByVal hExportKey As Long, ByVal pszBlobType As Long, ByVal pbOutput As Long, ByVal cbOutput As Long, ByRef cbResult As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptDestroyKey Lib "bcrypt" (ByVal hKey As Long) As Long
    Private Declare Function BCryptSecretAgreement Lib "bcrypt" (ByVal hPrivKey As Long, ByVal hPubKey As Long, ByRef phSecret As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptDestroySecret Lib "bcrypt" (ByVal hSecret As Long) As Long
    Private Declare Function BCryptDeriveKey Lib "bcrypt" (ByVal hSharedSecret As Long, ByVal pwszKDF As Long, ByVal pParameterList As Long, ByVal pbDerivedKey As Long, ByVal cbDerivedKey As Long, ByRef pcbResult As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptGenerateKeyPair Lib "bcrypt" (ByVal hAlgorithm As Long, ByRef hKey As Long, ByVal dwLength As Long, ByVal dwFlags As Long) As Long
    Private Declare Function BCryptFinalizeKeyPair Lib "bcrypt" (ByVal hKey As Long, ByVal dwFlags As Long) As Long
#End If

'=========================================================================
' Constants and member variables
'=========================================================================

Private Const STR_GLOB                  As String = "////////////////AAAAAAAAAAAAAAAAAQAAAP////9LYNInPjzOO/awU8ywBh1lvIaYdlW967Pnkzqq2DXGWpbCmNhFOaH0oDPrLYF9A3fyQKRj5ea8+EdCLOHy0Rdr9VG/N2hAtsvOXjFrVzPOKxaeD3xK6+eOm38a/uJC409RJWP8wsq584SeF6et+ua8//////////8AAAAA/////5gvikKRRDdxz/vAtaXbtelbwlY58RHxWaSCP5LVXhyrmKoH2AFbgxK+hTEkw30MVXRdvnL+sd6Apwbcm3Txm8HBaZvkhke+78adwQ/MoQwkbyzpLaqEdErcqbBc2oj5dlJRPphtxjGoyCcDsMd/Wb/zC+DGR5Gn1VFjygZnKSkUhQq3JzghGy78bSxNEw04U1RzCmW7Cmp2LsnCgYUscpKh6L+iS2YaqHCLS8KjUWzHGeiS0SQGmdaFNQ70cKBqEBbBpBkIbDceTHdIJ7W8sDSzDBw5SqrYTk/KnFvzby5o7oKPdG9jpXgUeMiECALHjPr/vpDrbFCk96P5vvJ4ccYirijXmC+KQs1l7yORRDdxLztN7M/7wLW824mBpdu16Ti1SPNbwlY5GdAFtvER8VmbTxmvpII/khiBbdrVXhyrQgIDo5iqB9i+b3BFAVuDEoyy5E6+hTEk4rT/1cN9DFVviXvydF2+crGWFjv+sd6ANRLHJacG3JuUJmnPdPGbwdJK8Z7BaZvk4yVPOIZHvu+11YyLxp3BD2WcrHfMoQwkdQIrWW8s6S2D5KZuqoR0StT7Qb3cqbBctVMRg9qI+Xar32buUlE+mBAytC1txjGoPyH7mMgnA7DkDu++x39Zv8KPqD3zC+DGJacKk0eRp9VvggPgUWPKBnBuDgpnKSkU/C/S" & _
                                                    "RoUKtycmySZcOCEbLu0qxFr8bSxN37OVnRMNOFPeY6+LVHMKZaiydzy7Cmp25q7tRy7JwoE7NYIUhSxykmQD8Uyh6L+iATBCvEtmGqiRl/jQcItLwjC+VAajUWzHGFLv1hnoktEQqWVVJAaZ1iogcVeFNQ70uNG7MnCgahDI0NK4FsGkGVOrQVEIbDcemeuO30x3SCeoSJvhtbywNGNaycWzDBw5y4pB40qq2E5z42N3T8qcW6O4stbzby5o/LLvXe6Cj3RgLxdDb2OleHKr8KEUeMiE7DlkGggCx4woHmMj+v++kOm9gt7rbFCkFXnGsvej+b4rU3Lj8nhxxpxhJurOPifKB8LAIce4htEe6+DN1n3a6njRbu5/T331um8Xcqpn8AammMiixX1jCq4N+b4EmD8RG0ccEzULcRuEfQQj9XfbKJMkx0B7q8oyvL7JFQq+njxMDRCcxGcdQ7ZCPsu+1MVMKn5l/Jwpf1ns+tY6q2/LXxdYR0qMGURsZXhwYW5kIDE2LWJ5dGUgawBleHBhbmQgMzItYnl0ZSBrAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwAAABjfHd78mtvxTABZyv+16t2yoLJffpZR/Ct1KKvnKRywLf9kyY2P/fMNKXl8XHYMRUExyPDGJYFmgcSgOLrJ7J1CYMsGhtuWqBSO9azKeMvhFPRAO0g/LFbasu+OUpMWM/Q76r7Q00zhUX5An9QPJ+oUaNAj5KdOPW8ttohEP/z0s0ME+xfl0QXxKd+PWRdGXNggU/cIiqQiEbuuBTeXgvb4DI6CkkGJFzC06xikZXkeefIN22N1U6pb" & _
                                                    "Fb06mV6rgi6eCUuHKa0xujddB9LvYuKcD61ZkgD9g5hNVe5hsEdnuH4mBFp2Y6Umx6H6c5VKN+MoYkNv+ZCaEGZLQ+wVLsWjQECBAgQIECAGzZSCWrVMDalOL9Ao56B89f7fOM5gpsv/4c0jkNExN7py1R7lDKmwiM97kyVC0L6w04ILqFmKNkksnZboklti9Elcvj2ZIZomBbUpFzMXWW2kmxwSFD97bnaXhVGV6eNnYSQ2KsAjLzTCvfkWAW4s0UG0Cwej8o/DwLBr70DAROKazqREUFPZ9zql/LPzvC05nOWrHQi5601heL5N+gcdd9uR/EacR0pxYlvt2IOqhi+G/xWPkvG0nkgmtvA/njNWvQf3agziAfHMbESEFkngOxfYFF/qRm1Sg0t5Xqfk8mc76DgO02uKvWwyOu7PINTmWEXKwR+unfWJuFpFGNVIQx9AAAAAAA=" ' 1688, 19.4.2020 16:10:18
Private Const STR_THUNK1                As String = "MNE1ABAuAADwMAAAABoAACAdAACgJgAA8CYAANAkAABgJwAA8CcAADAnAAAgGQAA4BgAADAOAACwDQAAzMzMzOgAAAAAWC1FQDUABQBANQCLAMPMzMzMzMzMzMzMzMzM6AAAAABYLWVANQAFAEA1AMPMzMzMzMzMzMzMzMzMzMxVi+yD7EhTi10QU+hATgAAhcAPhSkBAABWi3UMjUXYV1ZQ6IlUAACLfQiNRdhQV41FuFDoSFQAAI1F2FBQ6G5UAABTVlboNlQAAFNT6F9UAADoav///1BTV1fooVEAAOhc////UFNTU+iTUQAA6E7///9QU1dT6GVUAABTV1fo/VMAAOg4////UFdXU+hvUQAA6Cr///9QU1dX6GFRAABqAFfo6VkAAAvCdCDoEP///1BXV+iYSwAAV4vw6DBWAADB5h8JdxyLdQzrBlfoH1YAAFdT6NhTAADo4/7//1CNRbhQU1Po91MAAOjS/v//UI1FuFBTU+jmUwAA6MH+//9QU41FuFBQ6NVTAACNRbhQV1foalMAAOil/v//UI1F2FBXUOi5UwAAU1foIlYAAFZT6BtWAACNRdhQVugRVgAAX15bi+VdwgwAzMzMzMzMzMxVi+xWi3UIVujzTAAAhcB0F41GIFDo5kwAAIXAdAq4AQAAAF5dwgQAM8BeXcIEAMxVi+yB7KgAAABTi10MjUW4VldTUOi3VQAAjUMgUIlF+I2FeP///1DopFUAAP91FI2FWP///1CNRZhQjYV4////UI1FuFDohgMAAItdEFPonVQAAIPoAolFFIXAflsPHwBQU+ipWAAAC8J1B7gBAAAA6wIzwMHgBY2dWP///wPYjU2YA8iNtXj///9T99iJTfxRA/CNfbgD+FZX6OEBAABWV1P/" & _
                                                    "dfzo9gAAAItFFItdEEiJRRSFwH+oagBT6FBYAAALwnUFjUgB6wIzycHhBY2dWP///wPZiU0QU41FmAPBjb14////UCv5jXW4K/FXVuiMAQAA6Ef9//9QjUWYUI1FuFCNRdhQ6FVSAABXjUXYUFDo6lEAAP91DI1F2FBQ6N1RAADoGP3//1CNRdhQUOiNTwAA/3X4jUXYUFDowFEAAFaNRdhQUOi1UQAAV1aNRZgDRRBTUOhGAAAAjUXYUI2FWP///1CNRZhQ6KIFAACLdQiNRZhQVuhVVAAAjYVY////UI1GIFDoRVQAAF9eW4vlXcIQAMzMzMzMzMzMzMzMzFWL7IPsIFNWV+iS/P//i10Ii3UQUFNWjUXgUOigUQAAjUXgUFDoZlEAAI1F4FBTU+grUQAAjUXgUFZW6CBRAADoW/z//4t1DIt9FFBWV1fobFEAAFeNReBQ6DJRAADoPfz//1BTjUXgUFDoUVEAAOgs/P//UItFEFCNReBQUOg9UQAA6Bj8//9Qi0UQU1BQ6CxRAACLRRBQVlbowVAAAOj8+///UI1F4FBTi10QU+gNUQAAU1dX6KVQAADo4Pv//1BWV1fo91AAAI1F4FBT6F1TAABfXluL5V3CEADMzMzMVYvsg+xgU1ZX6LL7//+LXQiLfRBQU1eNRcBQ6MBQAACNRcBQUOiGUAAAjUXAUFNT6EtQAACNRcBQV1foQFAAAOh7+///i10Mi3UUUFNWjUXAUOipTQAA6GT7//9QU1ZW6HtQAADoVvv//1D/dQiNReBXUOhoUAAAjUXgUFNT6P1PAADoOPv//1BX/3UIjUXgUOhqTQAAVlfoE1AAAOge+///UI1F4FBXV+gyUAAA6A37//9QV4t9CI1FoFdQ6B5QA" & _
                                                    "ACNRaBQVlbos08AAOju+v//UFNWVugFUAAAjUXAUI1FoFDoyE8AAOjT+v//UI1F4FCNRaBQUOjkTwAA6L/6//9QV41FoFCNReBQ6NBPAACNRcBQjUXgUFDoYk8AAOid+v//UFONReBQU+ixTwAAjUWgUFfoF1IAAF9eW4vlXcIQAMzMzMzMzMzMzMzMzMzMVYvsg+wgVot1CFdW/3UQ6OxRAACLfQxX/3UU6OBRAACNReBQ6BdIAACLRRjHReABAAAAx0XkAAAAAIXAdApQjUXgUOi4UQAAjUXgUFdW6O0CAACNReBQV1boUvr//41F4FD/dRT/dRDo0wIAAF9ei+VdwhQAzMzMzMzMzMzMzMxTi0QkDItMJBD34YvYi0QkCPdkJBQD2ItEJAj34QPTW8IQAMzMzMzMzMzMzMzMzMyA+UBzFYD5IHMGD6XC0+DDi9AzwIDhH9PiwzPAM9LDzID5QHMVgPkgcwYPrdDT6sOLwjPSgOEf0+jDM8Az0sPMVYvsi0UQU1aLdQiNSHhXi30MjVZ4O/F3BDvQcwuNT3g78XcwO9dyLCv4uxAAAAAr8IsUOAMQi0w4BBNIBI1ACIlUMPiJTDD8g+sBdeRfXltdwgwAi9eNSBCL3ivQK9gr/rgEAAAAjXYgjUkgDxBB0A8QTDfgZg/UyA8RTuAPEEwK4A8QQeBmD9TIDxFMC+CD6AF10l9eW13CDADMzMzMzFWL7ItVHIPsCItFIFaLdQhXi30MA9cTRRCJFolGBDtFEHcPcgQ713MJuAEAAAAzyesOD1fAZg8TRfiLTfyLRfgDRSRfE00oA0UUiUYIi8YTTRiJTgxei+VdwiQAzMzMzFWL7ItVDItNCIsCMQGLQgQxQQSLQggxQQiLQgwxQQ" & _
                                                    "xdwggAzMzMzMzMzMzMzMzMzFWL7IPsCItNCItVEFNWiwGNWQTB6gIz9olVEIld+I0EhQQAAACJRfxXhdJ0QotVDIt9EIPCAmZmDx+EAAAAAAAPtkr+jVIED7ZC+8HhCAvID7ZC/MHhCAvID7ZC/cHhCAvIiQyzRjv3ctaLRfyL17kBAAAAM/+JTQw78A+DjQAAAIvGK8KNBIOJRQgPH0QAAItcs/w7+nUIQTP/iU0M6wSF/3Ut6Kf3//8FiAQAAMHDCFBT6AhDAACL2OiR9///i00MD7aECIgFAADB4Bgz2Osdg/oGdh6D/wR1Gehw9///BYgEAABQU+jUQgAAi9iLRQiLVRCLCEczy4PABItd+IlFCIkMs0aLTQw7dfxygl9eW4vlXcIMAMzMzMzMzMzMzFWL7IPsII1F4P91EFDoDkwAAI1F4FCLRQhQUOjQSwAA/3UQjUXgUFDow0sAAI1F4FCLRQxQUOi1SwAAi+VdwgwAzMzMzMzMzMzMzMzMzMzMVYvsg+wgU1aLdQgzyVeJTeyBBM4AAAEAiwTOg1TOBACLXM4ED6zYEMH7EIlF6IP5D3UVx0X8AQAAAIvQx0XwAAAAAIld+OsiD1fAZg8TRfSLRfiJRfCLRfRmDxNF4ItV4IlF/ItF5IlF+IP5D415AWoAG8D32A+vxytV/GoljTTGi0X4G0XwUFLoYvz//4tN6APBE9OD6AGD2gABBotF7BFWBIt1CA+kyxDB4RApDMaLz4lN7BlcxgSD+RAPgk////9fXluL5V3CBADMzMzMzFWL7IPsEItVDFZXD7YKD7ZCAcHhCAvID7ZCAsHhCAvID7ZCA8HhCAvID7ZCBYlN8A+2SgTB4QgLyA+2QgbB4QgLyA+2QgfB4QgLyA+" & _
                                                    "2QgmJTfQPtkoIweEIC8gPtkIKweEIC8gPtkILweEIC8gPtkIMiU34D7ZKDcHgCAvID7ZCDsHhCAvID7ZCD8HhCAvIiU38i00IizmNcQSLx8HgBAPwjUXwVlDo5fz//4PuEIPH/3QtjUXwUOjkKQAAjUXwUOh7KgAAVo1F8FDowfz//41F8FDoiCkAAIPuEIPvAXXTjUXwUOi3KQAAjUXwUOhOKgAAVo1F8FDolPz//4t1EItV8IvCi030wegYiAaLwsHoEIhGAYvCwegIiEYCi8HB6BiIVgOIRgSLwcHoEIhGBYvBwegIiEYGiE4Hi034i8HB6BiIRgiLwcHoEIhGCYvBwegIiEYKiE4Li038i8HB6BiIRgyLwcHoEIhGDYvBwegIiEYOX4hOD16L5V3CDADMzFWL7IPsEFNWV4tVDItdCA+2Cg+2QgHB4QiNcwQLyA+2QgLB4QgLyA+2QgPB4QgLyA+2QgWJTfAPtkoEweEIC8gPtkIGweEIC8gPtkIHweEIC8gPtkIJiU30D7ZKCMHhCAvID7ZCCsHhCAvID7ZCC8HhCAvID7ZCDIlN+A+2Sg3B4AgLyA+2Qg7B4QgLyA+2Qg/B4QgLyI1F8FZQiU386G37//+/AQAAAIPGEDk7di6QjUXwUOjXPgAAjUXwUOhuPQAAjUXwUOj1KQAAVo1F8FDoO/v//0eDxhA7O3LTjUXwUOiqPgAAjUXwUOhBPQAAVo1F8FDoF/v//4t1EItV8IvCi030wegYiAaLwsHoEIhGAYvCwegIiEYCi8HB6BiIVgOIRgSLwcHoEIhGBYvBwegIiEYGiE4Hi034i8HB6BiIRgiLwcHoEIhGCYvBwegIiEYKiE4Li038i8HB6BiIRgyLwcHoEIhGDYvB" & _
                                                    "wegIiEYOX4hOD15bi+VdwgwAzMzMzFWL7FaLdQho9AAAAGoAVujMKAAAi0UQg8QMg/gQdDyD+Bh0IYP4IHQG/xXUsDUAaiD/dQzHBg4AAABW6ID6//9eXcIMAGoY/3UMxwYMAAAAVuhq+v//Xl3CDABqEP91DMcGCgAAAFboVPr//15dwgwAzMzMzMzMzMzMzMzMzMzMVYvsgewAAQAAVuih8v//vrBLNQCB7gBANQAD8OiP8v///3UouTBKNQDHRfQQAAAA/3UkgekAQDUAiXX4A8GJRfyNhQD///9Q6DP/////dQiNhQD///9qEP91FGoM/3Ug/3Uc/3UY/3UQ/3UMUI1F9FDoOg8AAF6L5V3CJADMzMxVi+yB7AABAABW6CHy//++sEs1AIHuAEA1AAPw6A/y////dSi5MEo1AMdF9BAAAAD/dSSB6QBANQCJdfgDwYlF/I2FAP///1Dos/7//2oQ/3UMjYUA/////3UIagz/dSD/dRz/dRj/dRT/dRBQjUX0UOh6EAAAXovlXcIkAMzMzFWL7FFTi10YM8CJRfyF23Rxi1UQi00MVsdFGAEAAABXizmL8iv3O94PQvOFwHUdD7ZFFFZQi0UIA8dQ6CAnAACLTQyDxAyLRfyLVRCF/3UJO/IPREUYiUX8jQQ+O8J1F/91CP91IP9VHItNDItVEMcBAAAAAOsCATGLRfwr3nWgX15bi+VdwhwAzMzMzMzMzFWL7FaLdSCLxoPoAHRgg+gBD4SsAAAAU4PoAVeNRRR0bYt9KItdJFdTagFQ/3UQ/3UM/3UI6LYAAACLTRhXUzhNHHQvjUb+i3UQUFFW/3UM/3UI6Bj///9XU2oBjUUcUFb/dQz/dQjohAAAAF9bXl3CJACNRv+Ld" & _
                                                    "RBQUVb/dQz/dQjo6f7//19bXl3CJAD/dSiLXRD/dSSLfQyLdQhqAVBTV1boSAAAAP91KI1FHP91JGoBUFNXVug0AAAAX1teXcIkAP91KIpFHP91JDBFFI1FFGoBUP91EP91DP91COgNAAAAXl3CJADMzMzMzMzMzFWL7P91IItFHFBQ/3UY/3UU/3UQ/3UM/3UI6BEAAABdwhwAzMzMzMzMzMzMzMzMzFWL7ItNDItFJFOLXRSLEVaLdRhXhdJ0WYX2dFWLRRCL/ivCO8YPQviLwgNFCFdTUOhLJQAAi0UMA98r94PEDAE4i30QOTiLRSR1Kf91CFCF9nUN/1Ugi00Mi0UkiTHrFP9VHItNDItFJMcBAAAAAOsDi30QO/dyGVNQO/d1Bf9VIOsD/1Uci0UkK/cD3zv3c+eF9nQui0UMiwiLxyvBi/47xg9C+ItFCFcDwVNQ6M4kAACLRQwD34PEDAE4K/eLfRB11V9eW13CIADMzMzMzMxVi+yLTRyD7AhXi30Yhcl0dlOLXQxWgzsAdRH/dQj/dST/VSCLRRCLTRyJA4sDi/GLVRAr0DvBiVUYD0LwM8CJdfyF9nQvi10UK9+JXfhmkIt1/I0UOIoME4tVGANVCItd+DIMAo0UOECICjvGcuGLXQyLTRwpMyvOAXUUA/6JTRyFyXWRXltfi+VdwiAAzMxVi+zomO7//7mgWDUAgekAQDUAA8GLTQhRUP91FI1BdP91EP91DGpAUI1BNFDoPv///13CEADMzMzMzMzMzMzMVYvsg+xsi00UU1ZXD7ZZAw+2QQIPtlEHweIIweMIC9gPtkEBweMIC9gPtgHB4wgL2A+2QQYL0Ild2MHiCA+2QQUL0A+2QQTB4ggL0A+2QQqJVfSJVd" & _
                                                    "QPtlELweIIC9APtkEJweIIC9APtkEIweIIC9APtkEOiVXwiVXQD7ZRD8HiCAvQD7ZBDcHiCAvQD7ZBDItNCMHiCAvQiVX4D7ZBAolVzA+2UQPB4ggL0A+2QQHB4ggL0A+2AcHiCAvQD7ZBBolV7IlVyA+2UQfB4ggL0A+2QQXB4ggL0A+2QQTB4ggL0A+2QQqJVeiJVcQPtlELweIIC9DB4ggPtkEJC9APtkEIweIIC9APtkEOiVXkiVXAD7ZRD8HiCAvQD7ZBDcHiCAvQD7ZBDItNDMHiCAvQiVXgD7ZBAolVvA+2UQPB4ggL0A+2QQHB4ggL0A+2AcHiCAvQD7ZBBolVCIlVuA+2UQfB4ggL0A+2QQXB4ggL0A+2QQTB4ggL0A+2QQqJVRSJVbQPtlELweIIC9APtkEJweIIC9APtkEIweIIC9APtkEOiVUMiVWwD7ZRD8HiCAvQD7ZBDcHiCAvQD7ZBDMHiCAvQiVX8iVWsi1UQD7ZKAw+2QgLB4QgLyA+2QgHB4QgLyA+2AsHhCAvIiU3ciU2oD7ZyBw+2QgYPtnoLD7ZKDsHmCAvwwecID7ZCBcHmCAvwx0WYCgAAAA+2QgTB5ggL8A+2QgoL+Il1pA+2QgnB5wgL+A+2QgjB5wgL+A+2Qg/B4AgLwYl9oA+2Sg3B4AgLwQ+2SgyLVdzB4AgLwYtN7IlFnOsDi10QA9mLTQgz04ldEMHCEAPKiU0IM03swcEMA9kz04ldEItdCMHCCAPaiVXci1X0A1XoM/KJXQgz2cHGEItNFAPOwcMHiU0UM03owcEMA9Ez8olV9ItVFMHGCAPWiXXsi3XwA3XkM/6JVRQz0cHHEItNDAPPwcIHiU0MM03kwcEMA/Ez/ol18It1DMHHCAP" & _
                                                    "3iX2Ui334A33gM8eJdQwz8cHAEItN/APIwcYHiU38M03gwcEMA/kzx4l9+It9/MHACAP4iX38M/mLTRADysHHBzPBiU0Qi00MwcAQA8iJTQwzyotVEMHBDAPRM8KJVRCLVQzBwAgD0IlVDDPRi030A87BwgeJTfSJVeiLVdwz0YtN/MHCEAPKiU38M86LdfTBwQwD8TPWiXX0i3X8wcIIA/KJdfwz8YtN8APPwcYHiU3wiXXki3XsM/GLTQjBxhADzolNCDPPi33wwcEMA/kz94l98It9CMHGCAP+iX0IM/mLTfgDy8HHB4l94It9lDP5iU34i00UwccQA8+JTRQzy4td+MHBDAPZM/uJXfjBxwgBfRSLXRQz2YvLiV3swcEHg22YAYtd+IlN7A+FQP7//wFFnAFdzItN2ANNEAFVqItVGIlN2Itd2IvDi03UA030iBqJTdSLTdADTfDB6AiIQgGLw4lN0ItN7AFNyItNxANN6MHoEIhCAsHrGIhaA4td1IvDiFoEwegIiEIFi8OJTcSLTcADTeTB6BCIQgaJTcCLTbwDTeABdaQBfaDB6xiIWgeLXdCLw4haCIlNvItNuANNCMHoCIhCCYvDiU24i020A00UwegQiEIKwesYiFoLi13Mi8OJTbSLTbADTQyIWgzB6AiIQg2Lw4lNsItNrANN/MHoEIhCDsHrGIhaD4tdyIvDiU2siFoQwegIiEIRi8PB6BCIQhLB6xiIWhOLXcSLw4haFMHoCIhCFYvDwegQiEIWwesYiFoXi13Ai8OIWhjB6AiIQhmLw8HoEIhCGsHrGIhaG4tdvIvDiFocwegIiEIdi8PB6BCIQh7B6xiIWh+LXbiLw4haIMHoCIhCIYvDwegQiEIiwesYiFoj" & _
                                                    "i120i8OIWiTB6AiIQiWLw8HoEIhCJsHrGIhaJ4tdsIvDiFoowegIiEIpi8PB6BCIQirB6xiIWiuL2YhaLIvDwegIiEIti8PB6BCIQi7B6xiIWi+LXaiLw4haMMHoCIhCMY1KPIvDwesYwegQiEIyiFozi12ki8OIWjTB6AiIQjWLw8HoEIhCNsHrGIhaN4tdoIvDiFo4wegIiEI5i8PB6BCIQjrB6xiIWjuLVZyLwsHoCIgRiEEBi8JfwegQweoYXohBAohRA1uL5V3CFADMVYvsVv91EIt1CP91DFboLSsAAGoQ/3UUjUYgUOhfHQAAi0UYg8QMx0Z0AAAAAIlGeF5dwhQAzMzMzMzMzMzMzFWL7FaLdQhX/3UM/3YwjX4gV41GEFBW6ET5//+LVngzwIAHAXULQDvCdAaABDgBdPVfXl3CCADMzMzMzMzMzMxVi+yD7BCNRfBqEP91IFDo7BwAAIPEDI1F8FBqAP91JP91HP91GP91FP91EP91DP91COjZJQAAi+VdwiAAzMzMVYvs/3UkagH/dSD/dRz/dRj/dRT/dRD/dQz/dQjoriUAAF3CIADMzMzMzMzMzMzMVYvs6Ajn//+5wGs1AIHpAEA1AAPBi00IUVD/dRSLAf91EP91DP8wjUEoUI1BGFDorPf//13CEADMzMzMzMzMzFWL7ItNCItFDIlBLItFEIlBMF3CDADMzMzMzMzMzMzMVYvsVot1CGo0agBW6E8cAACLTQzHRiwAAAAAiwGJRjCLRRCJRgSNRgiJDsdGKAAAAAD/Mf91FFDo8xsAAIPEGF5dwhAAzMzMzMzMzMzMzMxVi+yB7CAEAABTVldqcI2FcP3//8eFYP3//0HbAABqAFDHhWT9//8AAAAAx4Vo/" & _
                                                    "f//AQAAAMeFbP3//wAAAADozBsAAIt1DI2FYP///2ofVlDoihsAAIpGH4PEGIClYP////gkPwxAiIV/////jYXg+////3UQUOiEMQAAD1fAjbVg/v//Zg8ThWD+//+NvWj+//+5HgAAAGYPE0WA86W5HgAAAGYPE4Xg/v//jXWAx4Vg/v//AQAAAI19iMeFZP7//wAAAADzpbkeAAAAx0WAAQAAAI214P7//8dFhAAAAACNvej+//+7/gAAAPOluSAAAACNteD7//+NveD9///zpYvDD7bLwfgDg+EHD7a0BWD///+NheD9///T7oPmAVZQjUWAUOhWJwAAVo2FYP7//1CNheD+//9Q6EInAACNheD+//9QjUWAUI2F4Pz//1Doa+v//42F4P7//1CNRYBQUOg6LwAAjYVg/v//UI2F4P3//1CNheD+//9Q6EDr//+NhWD+//9QjYXg/f//UFDoDC8AAI2F4Pz//1CNhWD+//9Q6NkuAACNRYBQjYVg/P//UOjJLgAAjUWAUI2F4P7//1CNRYBQ6IUbAACNheD8//9QjYXg/f//UI2F4P7//1DoaxsAAI2F4P7//1CNRYBQjYXg/P//UOjE6v//jYXg/v//UI1FgFBQ6JMuAACNRYBQjYXg/f//UOhjLgAAjYVg/P//UI2FYP7//1CNheD+//9Q6GkuAACNhWD9//9QjYXg/v//UI1FgFDoAhsAAI2FYP7//1CNRYBQUOhh6v//jUWAUI2F4P7//1BQ6OAaAACNhWD8//9QjYVg/v//UI1FgFDoyRoAAI2F4Pv//1CNheD9//9QjYVg/v//UOivGgAAjYXg/P//UI2F4P3//1DozC0AAFaNheD9//9QjUWAUOi7JQAAVo2FYP7//1" & _
                                                    "CNheD+//9Q6KclAACD6wEPiR/+//+NheD+//9QUOjxFgAAjYXg/v//UI1FgFBQ6FAaAACNRYBQ/3UI6KQcAABfXluL5V3CDADMzMzMzMzMzMzMzFWL7IPsII1F4MZF4AlQ/3UMD1fAx0X5AAAAAP91CA8RReFmx0X9AABmD9ZF8cZF/wDoqvz//4vlXcIIAMzMzMxVi+yB7BQBAABTi10IjUXwVleLfQwPV8BQUItDBFfGRfAAZg/WRfHHRfkAAAAAZsdF/QAAxkX/AP/Qi3Ukg/4MdSBW/3UgjUXQUOgxGAAAg8QMZsdF3QAAxkXcAMZF3wHrMI1F8FCNhez+//9Q6N4VAABW/3UgjYXs/v//UOj+EwAAjUXQUI2F7P7//1DorhQAAI1F8FCNhTz///9Q6K4VAAD/dRyNhTz/////dRhQ6KwTAACNRdDGReAAUFdTjUWMx0XpAAAAAA9XwGbHRe0AAFBmD9ZF4cZF7wDocPv//2oEagyNRYxQ6EP7//9qEI1F4FBQjUWMUOjz+v///3UUjYU8/////3UQUOhxEwAAjUXAUI2FPP///1DoIRQAAIt1LI1F4FZQjUXAUFDovzwAADLSjUXAuwEAAACF9nQai30oi8gr+YoMB41AATJI/wrRK/N18YTSdRT/dRSNRYz/dTD/dRBQ6IX6//8z2w9XwA8RRfCKRfAPEUXQikXQDxFF4IpF4A8RRcCKRcBqUI2FPP///2oAUOgUFwAAio08////jUWMajRqAFDoARcAAIpNjIPEGIvDX15bi+VdwiwAVYvsgewUAQAAU4tdCI1F8FZXi30MD1fAUFCLQwRXxkXwAGYP1kXxx0X5AAAAAGbHRf0AAMZF/wD/0It1JIP+DHUgVv91II1F0FD" & _
                                                    "ocRYAAIPEDGbHRd0AAMZF3ADGRd8B6zCNRfBQjYXs/v//UOgeFAAAVv91II2F7P7//1DoPhIAAI1F0FCNhez+//9Q6O4SAACNRfBQjYU8////UOjuEwAA/3UcjYU8/////3UYUOjsEQAAjUXQxkXgAFBXU41FjMdF6QAAAAAPV8Bmx0XtAABQZg/WReHGRe8A6LD5//9qBGoMjUWMUOiD+f//ahCNReBQUI1FjFDoM/n//4t9FI1FjIt1KFdW/3UQUOgf+f//V1aNhTz///9Q6KERAACNRcDGRcAAUI2FPP///8dFyQAAAAAPV8Bmx0XNAABQZg/WRcHGRc8A6DQSAAD/dTCNReBQjUXAUP91LOjROgAAD1fADxFF8IpF8A8RRdCKRdAPEUXgikXgDxFFwIpFwGpQjYU8////agBQ6GIVAACKhTz///9qNI1FjGoAUOhPFQAAikWMg8QYX15bi+VdwiwAVYvsi1UMi00QVot1CIsGMwKJAYtGBDNCBIlBBItGCDNCCIlBCItGDDNCDIlBDF5dwgwAzMzMzMzMzMzMzMzMzFWL7FFTi10MVleLfQhmx0X8AOGLD4vB0eiD4QGJA4tXBIvC0eiD4gHB4R8LyMHiH4lLBIt3CIvG0eiD5gEL0MHmH4lTCItPDIvB0eiD4QEL8F+JcwwPtkQN/MHgGDEDXluL5V3CCADMzMzMzMzMzMxVi+yLVQxWi3UID7YOD7ZGAcHhCAvID7ZGAsHhCAvID7ZGA8HhCAvIiQoPtk4ED7ZGBcHhCAvID7ZGBsHhCAvID7ZGB8HhCAvIiUoED7ZOCA+2RgnB4QgLyA+2RgrB4QgLyA+2RgvB4QgLyIlKCA+2TgwPtkYNweEIC8gPtkYOweEIC8gPtkYP" & _
                                                    "weEIC8iJSgxeXcIIAMzMzMzMzMzMzMzMVYvsg+wgVldqEI1F4GoAUOjbEwAAahD/dQyNRfBQ6J0TAACLfQiDxBgPEE3gM/aQi8a5HwAAAIPgHyvIi8bB+AWLBIfT6KgBdAwPEEXwZg/vyA8RTeCNRfBQUOiQ/v//RoH+gAAAAHzHahCNReBQ/3UQ6EkTAACDxAxfXovlXcIMAMzMzMzMzMzMzMzMzMzMVYvsVot1DFeLfQiLF4vCwegYiAaLwsHoEIhGAYvCwegIiEYCiFYDi08Ei8HB6BiIRgSLwcHoEIhGBYvBwegIiEYGiE4Hi08Ii8HB6BiIRgiLwcHoEIhGCYvBwegIiEYKiE4Li08Mi8HB6BiIRgyLwcHoEIhGDYvBwegIiEYOX4hOD15dwggAzMzMzMzMzMzMVYvsg+xEVot1CIO+qAAAAAB0BlboRxkAADPJDx9EAAAPtoQOiAAAAIlEjbxBg/kQcu5Wx0X8AAAAAOghGAAAjUW8UFbotxcAAItVDDPJZpCKBI6IBBFBg/kQcvRorAAAAGoAVuhnEgAAigaDxAxei+VdwggAzMzMzMzMzMzMzMxVi+xWi3UIaKwAAABqAFboPBIAAItNDGoQ/3UQD7YBiUZED7ZBAYlGSA+2QQKJRkwPtkEDg+APiUZQD7ZBBCX8AAAAiUZUD7ZBBYlGWA+2QQaJRlwPtkEHg+APiUZgD7ZBCCX8AAAAiUZkD7ZBCYlGaA+2QQqJRmwPtkELg+APiUZwD7ZBDCX8AAAAiUZ0D7ZBDYlGeA+2QQ6JRnwPtkEPg+APx4aEAAAAAAAAAImGgAAAAI2GiAAAAFDoYREAAIPEGF5dwgwAzMzMzMzMzMzMVYvs6Mjb//+5sH41AIHpAEA1AAPBi"
Private Const STR_THUNK2                As String = "00IUVD/dRCNgagAAAD/dQxqEFCNgZgAAABQ6Gvr//9dwgwAzMzMzMzMzFWL7IPsGFNWV+iC2////3UIviCENQC5QAAAAIHuAEA1AAPwi0UIVo14ZItAYPfhAweL2IPSAIPACIPgPyvIUWoAagBogAAAAGpAV4t9CA+k2gOJVfyNRyDB4wNQiVX46Azq//+LVfyLy4vCiF3vwegYiEXoi8LB6BCIRemLwsHoCIhF6opF+IhF64vCD6zBGGoIwegYiE3si8KLyw+swRDB6BCLw4hN7Q+s0AiIRe6NRehQweoIV+hkAQAAixeLwot1DMHoGIgGi8LB6BCIRgGLwsHoCIhGAohWA4tPBIvBwegYiEYEi8HB6BCIRgWLwcHoCIhGBohOB4tPCIvBwegYiEYIi8HB6BCIRgmLwcHoCIhGCohOC4tPDIvBwegYiEYMi8HB6BCIRg2LwcHoCIhGDohOD4tPEIvBwegYiEYQi8HB6BCIRhGLwcHoCIhGEohOE4tPFIvBwegYiEYUi8HB6BCIRhWLwcHoCIhGFohOF4tPGIvBwegYiEYYi8HB6BCIRhmLwcHoCIhGGohOG4tPHIvBwegYiEYci8HB6BCIRh2LwWpowegIagCIRh5XiE4f6IkPAACDxAxfXluL5V3CCADMzMzMzMzMzMzMzMzMVYvsVot1CGpoagBW6F8PAACDxAzHBmfmCWrHRgSFrme7x0YIcvNuPMdGDDr1T6XHRhB/Ug5Rx0YUjGgFm8dGGKvZgx/HRhwZzeBbXl3CBABVi+zoaNn//7kghDUAgekAQDUAA8GLTQhRUP91EI1BZP91DGpAUI1BIFDoEen//13CDADMzMzMzMzMzMzMzMzMVYvsg+xAjUXAUP91COi+AAAAaj" & _
                                                    "CNRcBQ/3UM6JAOAACDxAyL5V3CCADMzMzMzMzMVYvsVot1CGjIAAAAagBW6JwOAACDxAzHBtieBcHHRgRdnbvLx0YIB9V8NsdGDCopmmLHRhAX3XAwx0YUWgFZkcdGGDlZDvfHRhzY7C8Vx0YgMQvA/8dGJGcmM2fHRigRFVhox0Ysh0q0jsdGMKeP+WTHRjQNLgzbx0Y4pE/6vsdGPB1ItUdeXcIEAMzMzMzM6YsDAADMzMzMzMzMzMzMzFWL7IPsHItFCFONmMQAAABWi4DAAAAAV7+AAAAA9+eL8AMzi8aD0gAPpMIDweADiVX8iUX4iVX06CPY////dQi58IU1AIHpAEA1AAPBUI1GEIt1CIPgfyv4V2oAagBogAAAAGiAAAAAU41GQFDozub//2oIjUXkx0XkAAAAAFBWx0XoAAAAAOj0AgAAi138i8OLVfiLysHoGIhF5IvDwegQiEXli8PB6AiIReaKRfSIReeLww+swRhqCMHoGIhN6IvDi8qIVesPrMEQwegQi8KITekPrNgIiEXqjUXkUFbB6wjomQIAAIteBIvDiw6JTfzB6BiLfQyIB4vDwegQiEcBi8PB6AiIRwKLww+swRiIXwPB6BiITwSLw4tN/A+swRDB6BCITwWLTfyLwQ+s2AiIRwaLxohPB8HrCItYCIvLi1AMi8LB6BiIRwiLwsHoEIhHCYvCwegIiEcKi8IPrMEYiFcLwegYiE8Mi8KLyw+swRDB6BCITw2Lww+s0AiIRw6LxohfD8HqCItYEIvLi1AUi8LB6BiIRxCLwsHoEIhHEYvCwegIiEcSi8IPrMEYiFcTwegYiE8Ui8KLyw+swRDB6BCLw4hPFQ+s0AiIRxaLxsHqCIhfF4tYGIvLi1Aci8L" & _
                                                    "B6BiIRxiLwsHoEIhHGYvCwegIiEcai8IPrMEYiFcbwegYiE8ci8KLyw+swRDB6BCITx2Lww+s0AiIRx6LxohfH8HqCItYIIvLi1Aki8LB6BiIRyCLwsHoEIhHIYvCwegIiEcii8IPrMEYiFcjwegYiE8ki8KLyw+swRDB6BCITyWLww+s0AiIRyaLxohfJ8HqCItYKIvLi1Asi8LB6BiIRyiLwsHoEIhHKYvCwegIiEcqi8IPrMEYiFcrwegYiE8si8KLyw+swRDB6BCLw4hPLQ+s0AjB6giIRy6LxohfL413OGjIAAAAagCLWDCLy4tQNIvCwegYiEcwi8LB6BCIRzGLwsHoCIhHMovCD6zBGIhXM8HoGIhPNIvCi8sPrMEQwegQiE81i8MPrNAIiEc2iF83i30IweoIV4tXPIvCi184i8vB6BiIBovCwegQiEYBi8LB6AiIRgKLwg+swRiIVgPB6BiITgSLwovLD6zBEMHoEIvDiE4FD6zQCIhGBsHqCIheB+ilCgAAg8QMX15bi+VdwggAzMzMzMzMzMzMVYvs6NjU//+58IU1AIHpAEA1AAPBi00IUVD/dRCNgcQAAAD/dQxogAAAAFCNQUBQ6Hvk//9dwgwAzMzMzMzMzFWL7FaLdQj/dQyLDo1GCFD/dgSLQQT/0ItWLItGMAPWSF6ARAIIAXUTDx+AAAAAAIXAdAhIgEQCCAF09F3CCABVi+xTi10MVleLfQgPtkMYmYvIi/IPpM4ID7ZDGcHhCJkLyAvyD6TOCA+2QxrB4QiZC8gL8g+kzggPtkMbweEImQvIC/IPtkMcD6TOCJnB4QgL8gvID7ZDHQ+kzgiZweEIC/ILyA+2Qx4PpM4ImcHhCAvyC8gPtkMfD6TOCJnB" & _
                                                    "4QgL8gvIiXcEiQ8PtkMQmYvIi/IPtkMRD6TOCJnB4QgL8gvID7ZDEg+kzgiZweEIC/ILyA+2QxMPpM4ImcHhCAvyC8gPtkMUD6TOCJnB4QgLyAvyD6TOCA+2QxXB4QiZC8gL8g+kzggPtkMWweEImQvIC/IPpM4ID7ZDF8HhCJkLyAvyiU8IiXcMD7ZDCJmLyIvyD6TOCA+2QwnB4QiZC8gL8g+2QwoPpM4ImcHhCAvyC8gPtkMLD6TOCJnB4QgL8gvID7ZDDA+kzgiZweEIC/ILyA+2Qw0PpM4ImcHhCAvyC8gPtkMOD6TOCJnB4QgL8gvID7ZDDw+kzgiZweEIC/ILyIl3FIlPEA+2A5mLyIvyD7ZDAQ+kzgiZweEIC/ILyA+2QwIPpM4IweEImQvIC/IPtkMDD6TOCJnB4QgL8gvID7ZDBA+kzgiZweEIC/ILyA+2QwUPpM4ImcHhCAvyC8gPtkMGD6TOCJnB4QgL8gvID7ZDBw+kzgiZweEIC8gL8ol3HIlPGF9eW13CCADMzMxVi+yD7GCNReD/dQxQ6N79//+NReBQ6KUgAACFwHQIM8CL5V3CCACNReBQ6ADS//+D6IBQ6BcgAACD+AF0E+jt0f//g+iAUI1F4FBQ6E8rAABqAI1F4FDo1NH//4PAQFCNRaBQ6IfT//+NRaBQ6E7T//+FwHWpikXAi00IJAEEAogBjUWgUI1BAVDoEQAAALgBAAAAi+VdwggAzMzMzMzMVYvsVot1CLEoV4t9DA+2RweIRhgPtkcGiEYZiweLVwToy9f//4hGGrEgiweLVwTovNf//4hGG4sPi0cED6zBGIhOHIsPwegYi0cED6zBEIhOHYsPwegQi0cED6zBCIhOHrEowegID7YHiEYfD" & _
                                                    "7ZHD4hGEA+2Rw6IRhGLRwiLVwzoa9f//4hGErEgi0cIi1cM6FvX//+IRhOLTwiLRwwPrMEYiE4Ui08IwegYi0cMD6zBEIhOFYtPCMHoEItHDA+swQiIThaxKMHoCA+2RwiIRhcPtkcXiEYID7ZHFohGCYtHEItXFOgG1///iEYKsSCLRxCLVxTo9tb//4hGC4tPEItHFA+swRiITgyLTxDB6BiLRxQPrMEQiE4Ni08QwegQi0cUD6zBCIhODrEowegID7ZHEIhGDw+2Rx+IBg+2Rx6IRgGLRxiLVxzootb//4hGArEgi0cYi1cc6JLW//+IRgOLTxiLRxwPrMEYwegYiE4Ei08Yi0ccD6zBEMHoEIhOBYtPGItHHA+swQjB6AiITgYPtkcYX4hGB15dwggAzMxVi+yD7CBTVot1CA9XwFeLfQzHReADAAAAx0XkAAAAAA8RReiNRwFmD9ZF+FBW6H37//9WjV4gU+ijJAAA6K7P//9QjUXgUFNT6MIkAABWU1PoWiQAAOiVz///UOiPz///g8AgUFNT6MQhAABT6O4FAACKBzP2iwskAQ+2wIPhAZk7yHUEO/J0DVPoYc///1BT6MooAABfXluL5V3CCADMVYvsgeygAAAAjYVg/////3UIUOhI/////3UMjUXgUOjs+v//agCNReBQjYVg////UI1FoFDo1tD//41FoFD/dRDoev3//41FoFDokdD///fYG8BAi+VdwgwAzMzMzMzMVYvsi00Ii8HB6AeB4X9/f/8lAQEBAQPJa8AbM8FdwgQAzMzMzMzMzMzMzMzMzMzMVYvs6NjO//+5YHI1AIHpAEA1AAPBi00IUVD/dRCNQTD/dQxqEFCNQSBQ6IHe//9dwgwAzMzMzMzMzM" & _
                                                    "zMzMzMzFWL7ItNCItFEAFBOINRPACJRRCJTQhd6aT////MzMzMVYvsVot1CIN+SAF1DVboLQAAAMdGSAIAAACLRRABRkBQ/3UMg1ZEAFbocv///15dwgwAzMzMzMzMzMzMzMzMzFWL7FaLdQiLTjCFyXQpuBAAAAArwVCNRiADwWoAUOjNAwAAg8QMjUYgUFboEAAAAMdGMAAAAABeXcIEAMzMzMxVi+yD7BCNRfBWV1D/dQzoDO///4t1CI1F8I1+EFdXUOhL7v//V1ZX6JPv//9fXovlXcIIAMzMzMzMzMzMzMzMVYvsg+wUU1aLdQiLRkiD+AF0BYP4AnUNVuhi////x0ZIAAAAAIteOItWPA+k2gNqCIvCweMDwegYi8uIReyLwsHoEIhF7YvCwegIiEXuD7bCiEXvi8IPrMEYiVX8wegYiE3wi8KLy4hd8w+swRDB6BCLw4hN8Q+s0AiIRfKNRexQweoIVuhW/v//i15Ai1ZED6TaA2oIi8LB4wPB6BiLy4hF7IvCwegQiEXti8LB6AiIRe4PtsKIRe+Lwg+swRiJVfzB6BiITfCLwovLiF3zD6zBEMHoEIvDiE3xD6zQCIhF8o1F7FDB6ghW6PH9////dQyNRhBQ6BXv//9eW4vlXcIIAMzMzMzMzMzMzMzMzMxVi+xWi3UIalBqAFboTwIAAIPEDFb/dQzos+3//8dGSAEAAABeXcIIAMzMzMzMzMxVi+yB7IAAAAC5IAAAAFOLXQxWV4vzjX2A86W+/QAAAI1FgFBQ6HYWAACD/gJ0EIP+BHQLU41FgFBQ6DEDAACD7gF53It9CI11gLkgAAAA86VfXluL5V3CCADMzMzMzMxVi+xTVot1CFdW6AH9//+L2FPo+fz//4v" & _
                                                    "QUujx/P//i/gz/ov3i8czw8HPCDPywcAIi87ByRAzwTPHM8ZfM8MzRQheW13CBADMzMzMzMzMzFWL7FaLdQj/Nuii/////3YEiQbomP////92CIlGBOiN/////3YMiUYI6IL///+JRgxeXcIEAMzMzMzMzMzMzMxVi+xTi10IVlcPtnsHD7ZDAg+2cwsPtlMPwecIC/gPtksDD7ZDDcHnCAv4weYID7ZDCMHnCAv4weIID7ZDBgvwweEID7ZDAcHmCAvwD7ZDDMHmCAvwD7ZDCgvQD7ZDBcHiCAvQD7YDweIIC9APtkMOC8iJUwwPtkMJweEIC8iJcwgPtkMEiXsEweEIXwvIXokLW13CBADMzMzMzMzMzMzMVYvsVujHyv//i3UIBZMFAABQ/zboJxYAAIkG6LDK//8FkwUAAFD/dgToEhYAAIlGBOiayv//BZMFAABQ/3YI6PwVAACJRgjohMr//wWTBQAAUP92DOjmFQAAiUYMXl3CBADMzMzMzMzMzMzMzMzMzFWL7ItFCIvQVot1EIX2dBVXi30MK/iKDBeNUgGISv+D7gF18l9eXcPMzMzMzMzMzFWL7ItNEIXJdB8PtkUMVovxacABAQEBV4t9CMHpAvOri86D4QPzql9ei0UIXcPMzFWL7FaLdQhW6AP7//+L0IvOM9bByRDBwgjBzggz0TPWM8JeXcIEAMzMzMzMzMzMzFWL7FaLdQj/NujC/////3YEiQbouP////92CIlGBOit/////3YMiUYI6KL///+JRgxeXcIEAMzMzMzMzMzMzMxVi+yD7EBWD1fAx0XAAQAAAFeNRcDHRcQAAAAAUA8RRcjHReABAAAAZg/WRdjHReQAAAAADxFF6GYP1kX46E7J//9QjUXA" & _
                                                    "UOjUFQAAjUXAUOjrHwAAi30IjXD/g/4BdimNReBQUOgWHgAAVo1FwFDo7CMAAAvCdAtXjUXgUFDozR0AAE6D/gF3141F4FBX6I0gAABfXovlXcIEAMzMzMzMVYvsgewAAQAAi0UMD1fAU1ZXuTwAAABmDxOFAP///421AP///8dF/BAAAACNvQj////zpYtNEI2dCP///4PBEIvTK8KJTfiJRQxmDx9EAACL+cdFEAQAAACL8w8fRAAA/3QYBP80GP939P938OiOzv//AUb4i0UMEVb8/3QYBP80GP93/P93+Ohzzv//AQaLRQwRVgT/dBgE/zQY/3cE/zfoWs7//wFGCItFDBFWDP90GAT/NBj/dwz/dwjoP87//wFGEI1/IItFDBFWFI12IINtEAF1iotN+IPDCINt/AEPhWr///8z9moAaib/dPWE/3T1gOgHzv//AYT1AP///2oAEZT1BP///2om/3T1jP909Yjo6M3//wGE9Qj///9qABGU9Qz///9qJv909ZT/dPWQ6MnN//8BhPUQ////agARlPUU////aib/dPWc/3T1mOiqzf//AYT1GP///2oAEZT1HP///2om/3T1pP909aDoi83//wGE9SD///8RlPUk////g8YFg/4PD4JZ////i10IjbUA////uSAAAACL+/OlU+hp0P//U+hj0P//X15bi+VdwgwAzMzMzMzMzMzMzFWL7IPsEFNWi3UMV4t9GGoAVmoA/3UU6CTN//9qAFZqAFeJRfCL2ugUzf//agD/dRCJRfSL8moAV+gCzf//agD/dRCJRfxqAP91FIlV+OjtzP//i/iLRfQD+4PSAAP4E9Y71ncOcgQ7+HMIg0X8AINV+AGLRQgzyQtN8IkIM8kDVfyJe" & _
                                                    "AQTTfhfXolQCIlIDFuL5V3CFADMzMzMzMzMzMxVi+yB7AgBAACNhXj///9TVlf/dQxQ6KUJAACNhXj///9Q6InP//+NhXj///9Q6H3P//+NhXj///9Q6HHP//+Nvfj+//+7AgAAAGYPH0QAAIuNeP///4uFfP///4Hp7f8AAImN+P7//4PYAImF/P7//7gIAAAAZmYPH4QAAAAAAIt0B/iLTAf8i5QFeP///4l1+A+szhCLjAV8////g+YBx0QH/AAAAAAr1oPZAIHq//8AAImUBfj+//+D2QCJjAX8/v//D7dN+IlMB/iDwAiD+HhyrIuNaP///4uFbP///4tV8A+swRAPt4Vo////g+EBiYVo////K9HHhWz///8AAAAAi030uAEAAACD2QCB6v9/AACJlXD///+D2QCJjXT///8PrMoQg+IBwfkQK8JQjYX4/v//UI2FeP///1DojQcAAIPrAQ+FBP///4t1CDPSioTVeP///4uM1Xj///+IBFaLhNV8////D6zBCIhMVgFCwfgIg/oQctdfXluL5V3CCADMzMzMzMzMzMzMzMzMVYvsi0UIM9JWV4t9DCv4jXIRiwwHjUAEA0j8A9EPtsrB6giJSPyD7gF1519eXcIIAMzMzMzMzMzMzMzMzMzMzFWL7Fb/dQyLdQhW6LD///+NRkRQVui2AQAAXl3CCADMVYvsg+xEU1aLdQhXDxAGi0ZAiUX8DxFFvA8QRhAPEUXMDxBGIA8RRdwPEEYwDxFF7OhqxP//BUQEAABQjUW8UOhb////i0X8jX2899CNVcwlgAAAACv+uQIAAACNWP/30MHoH8HrHyPY99sr1ovD99CJRQhmD27DZg9w0ABmD27Ai8ZmD3DYAA8fhAAAAAAAjU" & _
                                                    "AgDxBA4A8QTAfgZg/bwmYP28tmD+vIDxFI4A8QQPAPEEwC4GYP28JmD9vLZg/ryA8RSPCD6QF1xo1WQI1xAYsMOo1SBCNNCIvDI0L8C8iJSvyD7gF16F9eW4vlXcIEAMzMzMzMzMzMzMzMzMzMzFWL7IPsRI1FvFZqRGoAUOhc+f//i3UIg8QMM8CLlqgAAACF0nQbZmYPH4QAAAAAAA+2jAaYAAAAiUyFvEA7wnLvjUW8x0SVvAEAAABQVuiN/v//XovlXcIEAMzMzMzMzFWL7FaLdQgzwDPSDx9EAAADBJYPtsiJDJZCwegIg/oQfO4DRkCLyMHoAoPhAzPSiU5AjQyAAwyWD7bBiQSWQsHpCIP6EHzuAU5AXl3CBADMVYvsg+xUi0UMjU2sU1aLdQgz2yvBx0X4EAAAAFeJRfAz0jP/M8CJVQiJVfyF23hRjUsBg/kCfDCLTfCNVayNDJkD0YsMho1S+A+vSggBTQiLTIYEg8ACD69KBAFN/I1L/zvBft6LVQg7w38Oi30Mi8sryIs8jw+vPIaLRfwDwgP4jUMBM9KJVQiLyIlV/IlF9IP4EX1yg334AnxDi1UMi8MrwY0UgoPCQA8fgAAAAACLBI6NUvgPr0IMjQSAweAGAUUIi0SOBIPBAg+vQgiNBIDB4AYBRfyD+RB81ItVCIP5EX0ai1UMi8MrwYtEgkQPrwSOi1UIjQSAweAGA/iLRfwDwgP4i0X0i034SYl8nayJTfiL2IP5/w+PAv///41FrFDoif7//w8QRayLRexfDxEGDxBFvA8RRhAPEEXMDxFGIA8QRdwPEUYwiUZAXluL5V3CCADMzMzMzMzMzMzMzFWL7ItVDIPsRDPADx9EAAAPtgwQiUyFvECD+BB88o1" & _
                                                    "FvMdF/AEAAABQ/3UI6J/8//+L5V3CCADMzMzMzMzMzMxVi+yB7HwBAABTVldqDP91DI1F4MZF3AAPV8DHReUAAAAAUGYP1kXdZsdF6QAAxkXrAOi59v//g8QMxkW8AI1F3MdF1QAAAAAPV8Bmx0XZAAAPEUW9agRQaiD/dQiNhTD///9mD9ZFzVDGRdsA6P7Y//9qII1FvFBQjYUw////UOhL0v//jUXMUI1FvFCNhYT+//9Q6Dfk//8PV8APEUW8ikW8aiCNRbxQUI2FMP///1APEUXM6BbS//+LdRQPV8BW/3UQDxFFvIpFvI2FhP7//8ZF7ABQDxFFzMdF9QAAAABmD9ZF7WbHRfkAAMZF+wDoq+T//4vG99iD4A9QjUXsUI2FhP7//1Dok+T//4N9JAGLfSCLXRxTdRRX/3UYjYUw////UOim0f//U1frA/91GI2FhP7//1DoY+T//4vD99iD4A9QjUXsUI2FhP7//1DoS+T//zPSiF30i8aJVeiIReyLyIvCD6zBCGoQwegIiE3ti8KLzg+swRDB6BCITe6LwovOD6zBGMHoGA+2wohF8IvCwegIiEXxi8LB6BCIRfLB6hiITe+Ly4hV8zPSi8KJVegPrMEIwegIiE31i8KLyw+swRDB6BCITfaLwovLD6zBGMHoGA+2wohF+IvCwegIiEX5i8LB6BCIRfqNRexQjYWE/v//weoYUIhN94hV++ib4///g30kAXUz/3UojYWE/v//UOg24v//anyNhTD///9qAFDo9vT//4qFMP///4PEDDPAX15bi+VdwiQAjUWsUI2FhP7//1DoAuL//4t1KI1NrIvBMtu6EAAAACvwkIoEDo1JATJB/wrYg+oBdfCLRRyE23U/UFf/dRiN" & _
                                                    "hTD///9Q6EjQ//9qfI2FMP///2oAUOiI9P//ioUw////g8QMD1fADxFFrIpFrF9eM8Bbi+VdwiQAhcB0DlBqAFfoXfT//4oHg8QManyNhTD///9qAFDoSPT//4qFMP///4PEDA9XwA8RRayKRaxfXrgBAAAAW4vlXcIkAMzMzMzMzMxVi+xWV4t9CA+2B5mLyIvyD7ZHAQ+kzgiZweEIC/ILyA+2RwIPpM4ImcHhCAvyC8gPtkcDD6TOCJnB4QgL8gvID7ZHBA+kzgiZweEIC/ILyA+2RwUPpM4ImcHhCAvyC8gPtkcGD6TOCJnB4QgL8gvID7ZHBw+kzgiZweEIC8EL1l9eXcIEAMzMzMzMzMzMzMxVi+yD7AiLRRBI99CZU4tdCIlF+ItFDIlV/PMPfl34jUt4VjP2Zg9s241QeDvBd0s703JHK9jHRRAQAAAAV2aQizwYjUAIi3QY/ItI+ItQ/DPPI034M9YjVfwz+TPyiXwY+Il0GPwxSPgxUPyDbRABdc5fXluL5V3CDACL041IECvQDxAM841JIA8QUdBmD+/RZg/b0w8owmYP78EPEQTzg8YEDxBB0GYP79APEVHQDxBMCuAPEFHgZg/v0WYP29MPKMJmD+/BDxFECuAPEEHgZg/vwg8RQeCD/hBypV5bi+VdwgwAzMzMzMzMzMzMzMxVi+yLVQyLRQgr0Fa+EAAAAIsMAo1ACIlI+ItMAvyJSPyD7gF1615dwggAzMzMzMxVi+yLRRBWV4P4EHQ/g/ggdAb/FdSwNQCLdQyLfQhqEFZX6Bny//9qEI1GEFCNRxBQ6Ary//+DxBjoYrz//wUxBAAAiUcwX15dwgwAi3UMi30IahBWV+jl8f//ahCNRxBWUOjZ8f//g8QY6" & _
                                                    "DG8//8FIAQAAIlHMF9eXcIMAMzMzFWL7IPsbItFCI1VlFNWu6AAAAAz9otIBIlN+ItICIlN9ItIDIlN6ItIEIlN/ItIFIlN8ItIGIlN7ItNDIPBAol13FeLOCvTi0AciX3giUXkiU3YiV0MiVXUDx+AAAAAAIP+EHMpD7Zx/g+2Qf/B5ggL8A+2AcHmCAvwD7ZBAcHmCAvwg8EEiTQaiU3Y61SNXgGD5g+NQ/2D4A+NfZSNPLeLTIWUi8OD4A+L8cHGD4tUhZSLwcHADTPwwekKM/GLwovKwcgHwcEOM8jB6gONQ/gzyotdDIPgDwPxA3SFlAM3iTfoObv//4t9/IvXwcoLi8/BwQcz0YvPwckG99cjfewz0YsMGIPDBItF8APKI0X8A86LdeAz+IvWiV0MwcoNi8bBwAoD+QN95DPQi8bByAIz0ItF+IvII8YzziNN9DPIi0XsiUXkA9GLRfCLTfiJReyLRfyJRfCLRegDx4l1+It13AP6i1XURolF/ItF9IlN9ItN2IlF6Il94Il13IH7oAEAAA+C1/7//4tFCItN+ItV/AFIBItN9AFICAFQEAE4i03oi1XwAUgMAVAUi1Xsi03kAVAYAUgc/0BgX15bi+VdwggAzMzMzMzMzMzMzMzMVYvsgezgAAAAU1aLdQi7oAEAAFeJXbiLBolF7ItGBIlF8ItGDIt+CIlF4ItGEIlF1ItGFIlF0ItGGIlFtItGHIlFsItGIIlF6ItGJIlF9ItGKIlFzItGLIlFyItGMIlFxItGNIlFwItGOIlFrItGPIt1DIl92I29IP///4lFqDPAK/uJRdyJfaAPH4AAAAAAg/gQcx9W6GX7//+LyIPGCIvCiU0MiUXkiQwfiUQfBOkTAQAAjVABx0" & _
                                                    "UMAAAAAI1C/YPgD4uMxSD///+LhMUk////iUX4i8KD4A+JTfyNjSD///+LlMUg////i/qLnMUk////i0Xcg+APiVW8wecYjQTBi8uJRaSLwg+syAgJRQyLRbzB6QgL+YvLD6zIAYl95Iv60ekz0gvQwecfMVUMC/mLRbyLTeQPrNgHM88xRQyLRfzB6wczyzPbiU3ki034i9EPpMEDweodweADC9mLTfgL0ItF/Iv4D6zIE4lVvDPSC9DB6ROLRbwzwsHnDYtV/Av5i034M98PrMoGM8LB6QaLVQwz2YtN5APQi0XcE8uDwPmD4A8DlMUg////E4zFJP///4tFpAMQiVUME0gEiRCJTeSJSATohLj//4tV9DP/i03oi9oPpMoXwesJC/rB4ReLVfQL2YtN6Ild/IvZD6zREol9+DP/C/nB6hIxffwz/4tN6MHjDgvai1X0MV34i9kPrNEOweMSC/nB6g4xffwL2otN+ItVuDPLi138i33o99cDHBATTBAEI33Ei1X0i0XI99IjRfQjVcAz0IlN+ItNzCNN6ItF+DP5i03wA98TwgNdDBNF5ANdrIld/BNFqDPbiUX4i0Xsi9APrMgcweIEwekcC9iLRewL0YtN8Iv5D6TBHolVDDPSwe8CC9HB4B4L+DPfMVUMM9KLTfCL+YtF7A+kwRnB7wcL0cHgGTFVDAv4i03YM9+LVeCL+TN97CN91CNN7DNV8DP5I1XQi0XgI0Xwi03EM9CLRQwD34t9+BPCiU2si03Ai1X8A1W0iU2oE32wi03MA138iU3Ei03IiU3Ai03oiU3Mi030iX30i33UiX20i33QiX2wi33YiX3Ui33giX3Qi33siU3Ii8gTTfiLRdyJXexAi124iX3Yg8MIi33"
Private Const STR_THUNK3                As String = "wiX3gi32giVXoiU3wiUXciV24gfsgBAAAD4Ib/f//i3UIi0Xsi33YAQaLReARTgSLygF+CIt9tBFGDItF1AFGEItF0BFGFAF+GItFsBFGHAFOIItF9BFGJItFzAFGKItFyBFGLItFxAFGMItFwBFGNItNrAFOOItNqBFOPP+GwAAAAF9eW4vlXcIIAMzMzMzMzMzMzMzMzMzMVYvsU4tdCFZXD7Z7Bw+2QwoPtnMLD7ZTD8HnCAv4D7ZLAw+2Qw3B5wgL+MHmCA+2A8HnCAv4weIID7ZDDgvwweEID7ZDAcHmCAvwD7ZDBMHmCAvwD7ZDAgvQD7ZDBcHiCAvQD7ZDCMHiCAvQD7ZDBgvIiXsED7ZDCcHhCAvIiXMID7ZDDMHhCF8LyIlTDF6JC1tdwgQAzMzMzMzMzMzMzFWL7ItFDFBQ/3UI6MDs//9dwggAzMzMzMzMzMzMzMzMVYvsi0UQU1aLdQiNSHhXi30MjVZ4O/F3BDvQcwuNT3g78XcwO9dyLCv4uxAAAAAr8IsUOCsQi0w4BBtIBI1ACIlUMPiJTDD8g+sBdeRfXltdwgwAi9eNSBCL3ivQK9gr/rgEAAAAjXYgjUkgDxBB0A8QTDfgZg/7yA8RTuAPEEwK4A8QQeBmD/vIDxFMC+CD6AF10l9eW13CDADMzMzMzFWL7Fbo97T//4t1CAWIBAAAUP826FcAAACJBujgtP//BYgEAABQ/3YE6EIAAACJRgToyrT//wWIBAAAUP92COgsAAAAiUYI6LS0//8FiAQAAFD/dgzoFgAAAIlGDF5dwgQAzMzMzMzMzMzMzMzMzMxVi+yLVQxTi10Ii8PB6BiLy1bB6QgPtskPtjQQi8PB6BAPtsAPtgwRweYID7YEEAvGweAI" & _
                                                    "C8EPtsvB4AheWw+2DBELwV3CCADMzMzMzMzMzFWL7ItNDFOLXQhWg8MQx0UMBAAAAFeDwQMPH4AAAAAAD7ZB/o1bIJmNSQiL8Iv6D7ZB9Q+k9wiZweYIA/CJc9AT+ol71A+2QfeZi/CL+g+2QfiZD6TCCMHgCAPwiXPYE/qJe9wPtkH6mYvwi/oPtkH5D6T3CJnB5ggD8Ilz4BP6iXvkD7ZB/JmL8Iv6D7ZB+w+k9wiZweYIA/CJc+gT+oNtDAGJe+wPhXT///+LTQhfXluBYXj/fwAAx0F8AAAAAF3CCADMzMzMzMzMzMzMzMxVi+yD7AhTi10MD1fAVleLfRCLE4vyi0MEi8hmDxNF+AM3E08EO/J1BjvIdQTrGDvIdw9yBDvycwm4AQAAADPS6wtmDxNF+ItF+ItV/It9CIlPBItNEIk3i3EIA3MIi0kME0sMA/ATyjtzCHUFO0sMdCA7Swx3EHIFO3MIcwm4AQAAADPS6wtmDxNF+ItV/ItF+IlPDItNEIl3CItxEANzEItJFBNLFAPwE8o7cxB1BTtLFHQgO0sUdxByBTtzEHMJuAEAAAAz0usLZg8TRfiLVfyLRfiJTxSJdxCLSxiLWxyJTQyLTRCLcRgDdQyLSRwTywPwE8o7dQx1BDvLdCw7y3cdcgU7dQxzFol3GLgBAAAAiU8cM9JfXluL5V3CDABmDxNF+ItV/ItF+Il3GIlPHF9eW4vlXcIMAMzMzMzMzFWL7ItFCMcAAAAAAMdABAAAAADHQAgAAAAAx0AMAAAAAMdAEAAAAADHQBQAAAAAx0AYAAAAAMdAHAAAAABdwgQAzMzMzMzMzMzMzMzMzMzMVYvsi00MugMAAABTi10IVivZjUEYV4ldCA8fgAAAAACLN" & _
                                                    "AOLXAMEi3gEiwg733cuciI78XcoO99yGncEO/FyFItdCIPoCIPqAXnVX14zwFtdwggAX16DyP9bXcIIAF9euAEAAABbXcIIAMzMzMzMzFWL7ItVCDPADx+EAAAAAACLDMILTMIEdQ9Ag/gEcvG4AQAAAF3CBAAzwF3CBADMzFWL7IPsEFOLXRC5QAAAAFaLdQgry1eLfQxmD27DiU0QiweLVwSJRfiJVfzzD35N+GYP88hmD9YO6GO3//+LTRCJRfCLRwiJVfSLVwyJRfiJVfzzD35N+GYPbsNmD/PI8w9+RfBmD+vIZg/WTgjoLrf//4tNEIlF8ItHEIlV9ItXFIlF+IlV/PMPfk34Zg9uw2YP88jzD35F8GYP68hmD9ZOEOj5tv//i00QiUXwi0cYiVX0i1cciUX4iVX88w9+TfhmD27DZg/zyPMPfkXwZg/ryGYP1k4Y6MS2//9fXluL5V3CDADMzMzMzMzMzMzMzFWL7IPsKFOLXQhWV4t9DFdT6MoHAACLRywPV8CJReSLRzCJReiLRzSJReyLRziJRfCLRzyJRfSNRdhqAVBQZg8TRdjHReAAAAAA6MH+//+L8I1F2FBTU+iE/P//i084A/CLRzCLVzyJReQzwAtHNIlF6I1F2GoBUFDHReAAAAAAiU3siVXwx0X0AAAAAOh+/v//A/CNRdhQU1PoQfz//wPwx0XkAAAAAItHIA9XwIlF2ItHJIlF3ItHKIlF4ItHOIlF8ItHPIlF9I1F2FBTU2YPE0Xo6Af8//+LTyQD8DPAiU3YC0coiUXci0cwi1c0i8qJRfgzwAtHLIlF4ItHOIlF6ItHPIlF7DPAC0cgiUX0jUXYUFNTiU3kiVXw6L/7//+LTywD8ItXNDPAC0cwD1" & _
                                                    "fAiUXci0cgiUXwjUXYiU3YM8kLTyhQU1OJVeDHReQAAAAAZg8TReiJTfToYQgAAItXJCvwi0cwD1fAiUXYsSCLRzSJRdyLRziJReCLRzyJReSLRyBmDxNF6Ogitf//C1csiUXwjUXYUFNTiVX06B4IAACLVQwr8ItPNDPAC0c4i18kiUXcM8ALRzyJTdiLTyAz/4lF4ItCKItSLIlN5LEg6Lu0//8L2MdF8AAAAACJXegL+otdDIl97It9CItDMIlF9I1F2FBXV+jDBwAAK/DHReAAAAAAi0M4iUXYi0M8iUXci0MkiUXki0MoiUXoi0MsiUXsi0M0iUX0jUXYUFdXx0XwAAAAAOiEBwAAK/B5IOgLrv//UFdX6JP6//8D8HjvX15bi+VdwggAZg8fRAAAhfZ1EVfo5q3//1DoAPz//4P4AXTc6Nat//9QV1foPgcAACvw69rMzMzMzMzMzMzMVYvsVv91EIt1CP91DFboPfr//wvCdQ3/dRRW6MD7//+FwHgK/3UUVlboAgcAAF5dwhAAzMzMzMzMzMzMzMzMzFWL7IHsiAAAAFaLdQxW6P37//+FwHQP/3UI6DH7//9ei+VdwgwAV1aNhXj///9Q6NwEAACLfRCNRZhXUOjPBAAAjUXYUOgG+///jUW4x0XYAQAAAFDHRdwAAAAA6O/6//+NRZhQjYV4////UOgv+///i9CF0g+EsAEAAFMPH0AAi414////D1fAg+EBZg8TRfiDyQB1L42FeP///1DoDgQAAItF2IPgAYPIAA+EtgAAAFeNRdhQUOhU+f//i/CL2umoAAAAi0WYg+ABg8gAdSyNRZhQ6NcDAACLRbiD4AGDyAAPhAgBAABXjUW4UFDoHfn//4vwi9rp+gAAAIX" & _
                                                    "SD46MAAAAjUWYUI2FeP///1BQ6NsFAACNhXj///9Q6I8DAACNRbhQjUXYUOhy+v//hcB5C1eNRdhQUOjT+P//jUW4UI1F2FBQ6KUFAACLRdiD4AGDyAB0EVeNRdhQUOiv+P//i/CL2usGi138i3X4jUXYUOg6AwAAC/MPhJIAAACLRfCBTfQAAACAiUXw6YAAAACNhXj///9QjUWYUFDoTwUAAI1FmFDoBgMAAI1F2FCNRbhQ6On5//+FwHkLV41FuFBQ6Er4//+NRdhQjUW4UFDoHAUAAItFuIPgAYPIAHQRV41FuFBQ6Cb4//+L8Iva6waLXfyLdfiNRbhQ6LECAAAL83QNi0XQgU3UAAAAgIlF0I1FmFCNhXj///9Q6ID5//+L0IXSD4VW/v//W41F2FD/dQjo2QIAAF9ei+VdwgwAzFWL7IPsQI1FwP91EP91DFDoewAAAI1FwFD/dQjoz/r//4vlXcIMAMzMzMzMzMzMzFWL7IPsQI1FwP91DFDozgIAAI1FwFD/dQjoovr//4vlXcIIAMzMzMzMzMzMzMzMzFWL7Fb/dRCLdQj/dQxW6D0EAAALwnQK/3UUVlboT/f//15dwhAAzMzMzMzMzMzMzFWL7IPsYFMPV8BWZg8TRdiLRdxXZg8TRdAz/4td1IlF/DP2jUf9g/8ED1fAZg8TRfSLVfQPQ/A79w+H0gAAAItNEIvHDxBF0CvGDxFFwI0cwYtF+IlF8IlV+GYPH0QAAIP+BA+DowAAAP9zBItFDP8z/3TwBP808I1FsFDo/+L//4PsEIvMg+wQDxAADxAIi8QPEQEPEEXADxFN4A8RAI1FoFDoKLH//2YPc9kMDxAQZg9+yA8owmYPc9gMZg9+wQ8RVcCJTfwPEVXQ" & _
                                                    "O8h3E3IIi0XYO0Xocwm4AQAAADPJ6w4PV8BmDxNF6ItN7ItF6ItV+APQi0XwiVX4E8FGg+sIiUXwO/cPhlT///+LXdTrA4tF+ItNCIt10Ik0+Yvxi8qL0IlV3Ilc/gRHi3XYi138iXXQiV3UiU3YiVX8g/8HD4Lb/v//i0UIX4lwOF6JWDxbi+VdwgwAzMzMzMzMzMxVi+xWV4t9CFfoQgAAAIvwhfZ1Bl9eXcIEAItU9/iLyotE9/wz/wvIdBNmDx9EAAAPrMIBR9Hoi8oLyHXzweYGjUbAA8dfXl3CBADMzMzMzFWL7ItVCLgDAAAADx9EAACLDMILTMIEdQWD6AF58kBdwgQAzMzMzMzMzMzMzMzMzFWL7IPsCItFCA9XwFOL2GYPE0X4g8AgO8N2OItN+FZXi338iU0Ii3D4g+gIi86LUAQPrNEBC00I0eoL14kIi/6JUATB5x/HRQgAAAAAO8N31V9eW4vlXcIEAMzMzMzMzFWL7ItVDItNCIsCiQGLQgSJQQSLQgiJQQiLQgyJQQyLQhCJQRCLQhSJQRSLQhiJQRiLQhyJQRxdwggAzMzMzMxVi+yD7GBTD1fAM8lWZg8TRdiLRdxXZg8TRdCLfdSJTeiJRfAz9o1B/YP5BA9XwGYPE0X4i138D0PwO/EPhxkBAACLVQyLwQ8QRdArxold9A8RRcCNBMKLVfiJReyJVfyL+Sv+O/cPh+oAAAD/cAT/MItFDP908AT/NPCNRbBQ6Hzg//8PEAAPEUXQO/dzQ4tN3IvBi1XUi/rB6B8BRfyLRdiD0wDB7x8PpMEBiV30M9sDwAvZC/iJXdyLRdAPpMIBiX3YA8CJVdSJRdAPEEXQ6waLXdyLfdiD7BCLxIPsEA8RAIvEDxBFw" & _
                                                    "A8RAI1FoFDoW67//w8QCA8owWYPc9gMZg9+wA8RTcCJRfAPEU3QO8N3EHIFOX3Ycwm4AQAAADPJ6w4PV8BmDxNF4ItN5ItF4ItV/Itd9APQi0XsE9mJVfyLTehGg+gIiV30iUXsO/EPhgr///+LfdTrA4tV+It1CItF0IkEzotF2Il8zgRBi33wiVXYi9OJRdCJfdSJVfCJVdyJTeiD+QcPgpX+//+JfjxfiUY4XluL5V3CCADMzFWL7IPsDFOLXQwPV8BWV4t9EIsTi/KLQwSLyGYPE0X0KzcbTwQ78nUGO8h1BOsYO8hyD3cEO/J2CbgBAAAAM9LrC2YPE0X0i0X0i1X4i30IiU8Ei00QiTeLcwiJdfgrcQiLSwyLXRAbSwwr8ItdDBvKO3X4dQU7Swx0IDtLDHIQdwU7cwh2CbgBAAAAM9LrC2YPE0X0i1X4i0X0iU8Mi00QiXcIi3MQiXX8K3EQi0sUi10QG0sUK/CLXQwbyjt1/HUFO0sUdCA7SxRyEHcFO3MQdgm4AQAAADPS6wtmDxNF9ItV+ItF9IlPFIl3EItLGIvxi30Qi1sciU0Mi00QK3EYi8sbTxwr8It9CBvKO3UMdQQ7y3QsO8tyHXcFO3UMdhaJdxi4AQAAAIlPHDPSX15bi+VdwgwAZg8TRfSLVfiLRfSJdxiJTxxfXluL5V3CDADMzMzMzMzMzMzMzMzMzMxVi+yLTQgz0lZXi30MM/aLx4PgPw+rxoP4IA9D1jPyg/hAD0PWwe8GIzT5I1T5BIvGX15dwggAzMzMzMzMzMzMVYvsi1UUg+wQM8mF0g+EwgAAAFOLXRBWi3UIV4t9DIP6IA+CiwAAAI1D/wPCO/B3CY1G/wPCO8NzeY1H/wPCO/B3CY1G/w" & _
                                                    "PCO8dzZ4vCi9cr04Pg4IlV/IvWK9OJRfCJVfiLw4td+IvXi338K9aJVfSNVhAPEACLdfSDwSCNQCCNUiAPEEwH4GYP78gPEUwD4A8QTBbgi3UIDxBA8GYP78gPEUrgO03wcsqLVRSLfQyLXRA7ynMbK/uNBBkr8yvRigw4jUABMkj/iEww/4PqAXXuX15bi+VdwhAAAAA=" ' 23597, 19.4.2020 16:10:18
Private Const CF_SHA256_HASHSZ          As Long = 32
Private Const CF_SHA256_BLOCKSZ         As Long = 64
Private Const CF_SHA384_HASHSZ          As Long = 48
Private Const CF_SHA384_BLOCKSZ         As Long = 128
Private Const CF_SHA384_CONTEXTSZ       As Long = 200
Private Const LNG_HMAC_INNER_PAD        As Long = &H36
Private Const LNG_HMAC_OUTER_PAD        As Long = &H5C
Private Const LNG_CHACHA20POLY1305_TAG_SIZE As Long = 16
Private Const LNG_AESGCM_TAG_SIZE       As Long = 16
Private Const LNG_FACILITY_WIN32        As Long = &H80070000
Private Const ERR_OUT_OF_MEMORY         As Long = 8

Private m_uData                    As UcsCryptoThunkData

Private Enum UcsThunkPfnIndexEnum
    ucsPfnSecp256r1MakeKey = 1
    ucsPfnSecp256r1SharedSecret
    ucsPfnCurve25519ScalarMultiply
    ucsPfnCurve25519ScalarMultBase
    ucsPfnSha256Init
    ucsPfnSha256Update
    ucsPfnSha256Final
    ucsPfnSha384Init
    ucsPfnSha384Update
    ucsPfnSha384Final
    ucsPfnChacha20Poly1305Encrypt
    ucsPfnChacha20Poly1305Decrypt
    ucsPfnAesGcmEncrypt
    ucsPfnAesGcmDecrypt
    [_ucsPfnMax]
End Enum

Private Type UcsCryptoThunkData
    Thunk               As Long
    Glob()              As Byte
    Pfn(1 To [_ucsPfnMax] - 1) As Long
    EccKeySize          As Long
    HashCtx(0 To CF_SHA384_CONTEXTSZ - 1) As Byte
    HashPad(0 To CF_SHA384_BLOCKSZ - 1) As Byte
    HashFinal(0 To CF_SHA384_HASHSZ - 1) As Byte
    hRandomProv         As Long
End Type

'=========================================================================
' Functions
'=========================================================================

Public Function CryptoInit() As Boolean
    Dim lOffset         As Long
    Dim lIdx            As Long
    Dim hError          As Long
    Dim sApiSource      As String
    
    If m_uData.Thunk <> 0 Then
        '--- success
        CryptoInit = True
        Exit Function
    End If
    With m_uData
        #If ImplUseLibSodium Then
            If GetModuleHandle("libsodium.dll") = 0 Then
                Call LoadLibrary(App.Path & "\libsodium.dll")
                If sodium_init() < 0 Then
                    hError = ERR_OUT_OF_MEMORY
                    sApiSource = "sodium_init"
                    GoTo QH
                End If
            End If
        #Else
            If CryptAcquireContext(.hRandomProv, 0, 0, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) = 0 Then
                hError = Err.LastDllError
                sApiSource = "CryptAcquireContext"
                GoTo QH
            End If
        #End If
        .EccKeySize = 32
        '--- prepare thunk/context in executable memory
        .Thunk = pvThunkAllocate(STR_THUNK1 & STR_THUNK2 & STR_THUNK3)
        If .Thunk = 0 Then
            hError = ERR_OUT_OF_MEMORY
            sApiSource = "VirtualAlloc"
            GoTo QH
        End If
        ReDim .Glob(0 To (Len(STR_GLOB) \ 4) * 3 - 1) As Byte
        pvThunkAllocate STR_GLOB, VarPtr(.Glob(0))
        '--- init pfns from thunk addr + offsets stored at beginning of it
        For lIdx = LBound(.Pfn) To UBound(.Pfn)
            Call CopyMemory(lOffset, ByVal UnsignedAdd(.Thunk, 4 * lIdx), 4)
            .Pfn(lIdx) = UnsignedAdd(.Thunk, lOffset)
        Next
        '--- init pfns trampolines
        Call pvPatchProto(AddressOf pvCryptoCallSecp256r1MakeKey)
        Call pvPatchProto(AddressOf pvCryptoCallSecp256r1SharedSecret)
        Call pvPatchProto(AddressOf pvCryptoCallCurve25519Multiply)
        Call pvPatchProto(AddressOf pvCryptoCallCurve25519MulBase)
        Call pvPatchProto(AddressOf pvCryptoCallSha256Init)
        Call pvPatchProto(AddressOf pvCryptoCallSha256Update)
        Call pvPatchProto(AddressOf pvCryptoCallSha256Final)
        Call pvPatchProto(AddressOf pvCryptoCallSha384Init)
        Call pvPatchProto(AddressOf pvCryptoCallSha384Update)
        Call pvPatchProto(AddressOf pvCryptoCallSha384Final)
        Call pvPatchProto(AddressOf pvCryptoCallChacha20Poly1305Encrypt)
        Call pvPatchProto(AddressOf pvCryptoCallChacha20Poly1305Decrypt)
        Call pvPatchProto(AddressOf pvCryptoCallAesGcmEncrypt)
        Call pvPatchProto(AddressOf pvCryptoCallAesGcmDecrypt)
        '--- init thunk's first 4 bytes -> global data in C/C++
        Call CopyMemory(ByVal .Thunk, VarPtr(.Glob(0)), 4)
    End With
    '--- success
    CryptoInit = True
QH:
    If LenB(sApiSource) <> 0 Then
        Err.Raise IIf(Err.LastDllError < 0, Err.LastDllError, Err.LastDllError Or LNG_FACILITY_WIN32), sApiSource
    End If
End Function

Public Function CryptoEccSecp256r1MakeKey(baPrivate() As Byte, baPublic() As Byte) As Boolean
    Const MAX_RETRIES   As Long = 16
    Dim lIdx            As Long
    
    #If ImplUseBCrypt Then
        CryptoEccSecp256r1MakeKey = pvBCryptEcdhP256KeyPair(baPrivate, baPublic)
    #Else
        ReDim baPrivate(0 To m_uData.EccKeySize - 1) As Byte
        ReDim baPublic(0 To m_uData.EccKeySize) As Byte
        For lIdx = 1 To MAX_RETRIES
            CryptoRandomBytes VarPtr(baPrivate(0)), m_uData.EccKeySize
            If pvCryptoCallSecp256r1MakeKey(m_uData.Pfn(ucsPfnSecp256r1MakeKey), baPublic(0), baPrivate(0)) = 1 Then
                Exit For
            End If
        Next
        '--- success (or failure)
        CryptoEccSecp256r1MakeKey = (lIdx <= MAX_RETRIES)
    #End If
End Function

Public Function CryptoEccSecp256r1SharedSecret(baPrivate() As Byte, baPublic() As Byte) As Byte()
    Dim baRetVal()      As Byte
    
    #If ImplUseBCrypt Then
        Debug.Assert pvArraySize(baPrivate) = BCRYPT_SECP256R1_PRIVATE_KEY_SIZE
        Debug.Assert pvArraySize(baPublic) >= BCRYPT_SECP256R1_PUBLIC_KEY_SIZE
        baRetVal = pvBCryptEcdhP256AgreedSecret(baPrivate, baPublic)
    #Else
        Debug.Assert UBound(baPrivate) >= m_uData.EccKeySize - 1
        Debug.Assert UBound(baPublic) >= m_uData.EccKeySize
        ReDim baRetVal(0 To m_uData.EccKeySize - 1) As Byte
        If pvCryptoCallSecp256r1SharedSecret(m_uData.Pfn(ucsPfnSecp256r1SharedSecret), baPublic(0), baPrivate(0), baRetVal(0)) = 0 Then
            GoTo QH
        End If
    #End If
    CryptoEccSecp256r1SharedSecret = baRetVal
QH:
End Function

Public Function CryptoEccCurve25519MakeKey(baPrivate() As Byte, baPublic() As Byte) As Boolean
    ReDim baPrivate(0 To m_uData.EccKeySize - 1) As Byte
    ReDim baPublic(0 To m_uData.EccKeySize - 1) As Byte
    CryptoRandomBytes VarPtr(baPrivate(0)), m_uData.EccKeySize
    baPrivate(0) = baPrivate(0) And 248
    baPrivate(UBound(baPrivate)) = (baPrivate(UBound(baPrivate)) And 127) Or 64
    pvCryptoCallCurve25519MulBase m_uData.Pfn(ucsPfnCurve25519ScalarMultBase), baPublic(0), baPrivate(0)
    '--- success
    CryptoEccCurve25519MakeKey = True
End Function

Public Function CryptoEccCurve25519SharedSecret(baPrivate() As Byte, baPublic() As Byte) As Byte()
    Dim baRetVal()      As Byte
    
    Debug.Assert UBound(baPrivate) >= m_uData.EccKeySize - 1
    Debug.Assert UBound(baPublic) >= m_uData.EccKeySize - 1
    ReDim baRetVal(0 To m_uData.EccKeySize - 1) As Byte
    pvCryptoCallCurve25519Multiply m_uData.Pfn(ucsPfnCurve25519ScalarMultiply), baRetVal(0), baPrivate(0), baPublic(0)
    CryptoEccCurve25519SharedSecret = baRetVal
End Function

Public Function CryptoHashSha256(baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim baRetVal()      As Byte
    
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        pvCryptoCallSha256Init .Pfn(ucsPfnSha256Init), lCtxPtr
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, lPtr, lSize
        ReDim baRetVal(0 To CF_SHA256_HASHSZ - 1) As Byte
        pvCryptoCallSha256Final .Pfn(ucsPfnSha256Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    CryptoHashSha256 = baRetVal
End Function

Public Function CryptoHashSha384(baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim baRetVal()      As Byte
    
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        pvCryptoCallSha384Init .Pfn(ucsPfnSha384Init), lCtxPtr
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, lPtr, lSize
        ReDim baRetVal(0 To CF_SHA384_HASHSZ - 1) As Byte
        pvCryptoCallSha384Final .Pfn(ucsPfnSha384Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    CryptoHashSha384 = baRetVal
End Function

Public Function CryptoHmacSha256(baKey() As Byte, baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim lIdx            As Long
    
    Debug.Assert UBound(baKey) < CF_SHA256_BLOCKSZ
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        '-- inner hash
        pvCryptoCallSha256Init .Pfn(ucsPfnSha256Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA256_BLOCKSZ, LNG_HMAC_INNER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_INNER_PAD
        Next
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA256_BLOCKSZ
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, lPtr, lSize
        pvCryptoCallSha256Final .Pfn(ucsPfnSha256Final), lCtxPtr, VarPtr(.HashFinal(0))
        '-- outer hash
        pvCryptoCallSha256Init .Pfn(ucsPfnSha256Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA256_BLOCKSZ, LNG_HMAC_OUTER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_OUTER_PAD
        Next
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA256_BLOCKSZ
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, VarPtr(.HashFinal(0)), CF_SHA256_HASHSZ
        ReDim baRetVal(0 To CF_SHA256_HASHSZ - 1) As Byte
        pvCryptoCallSha256Final .Pfn(ucsPfnSha256Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    CryptoHmacSha256 = baRetVal
End Function

Public Function CryptoHmacSha384(baKey() As Byte, baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim lIdx            As Long
    
    Debug.Assert UBound(baKey) < CF_SHA384_BLOCKSZ
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        '-- inner hash
        pvCryptoCallSha384Init .Pfn(ucsPfnSha384Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA384_BLOCKSZ, LNG_HMAC_INNER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_INNER_PAD
        Next
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA384_BLOCKSZ
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, lPtr, lSize
        pvCryptoCallSha384Final .Pfn(ucsPfnSha384Final), lCtxPtr, VarPtr(.HashFinal(0))
        '-- outer hash
        pvCryptoCallSha384Init .Pfn(ucsPfnSha384Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA384_BLOCKSZ, LNG_HMAC_OUTER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_OUTER_PAD
        Next
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA384_BLOCKSZ
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, VarPtr(.HashFinal(0)), CF_SHA384_HASHSZ
        ReDim baRetVal(0 To CF_SHA384_HASHSZ - 1) As Byte
        pvCryptoCallSha384Final .Pfn(ucsPfnSha384Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    CryptoHmacSha384 = baRetVal
End Function

Public Function CryptoAeadChacha20Poly1305Encrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    Call pvCryptoCallChacha20Poly1305Encrypt(m_uData.Pfn(ucsPfnChacha20Poly1305Encrypt), _
            baKey(0), baNonce(0), _
            baAad(lAadPos), lAdSize, _
            baBuffer(lPos), lSize, _
            baBuffer(lPos), baBuffer(lPos + lSize))
    '--- success
    CryptoAeadChacha20Poly1305Encrypt = True
End Function

Public Function CryptoAeadChacha20Poly1305Decrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    If pvCryptoCallChacha20Poly1305Decrypt(m_uData.Pfn(ucsPfnChacha20Poly1305Decrypt), _
            baKey(0), baNonce(0), _
            baAad(lAadPos), lAdSize, _
            baBuffer(lPos), lSize - LNG_CHACHA20POLY1305_TAG_SIZE, _
            baBuffer(lPos + lSize - LNG_CHACHA20POLY1305_TAG_SIZE), baBuffer(lPos)) = 0 Then
        '--- success
        CryptoAeadChacha20Poly1305Decrypt = True
    End If
End Function

Public Function CryptoAeadAesGcmEncrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    Call pvCryptoCallAesGcmEncrypt(m_uData.Pfn(ucsPfnAesGcmEncrypt), _
            baBuffer(lPos), baBuffer(lPos + lSize), _
            baBuffer(lPos), lSize, _
            baAad(lAadPos), lAdSize, _
            baNonce(0), baKey(0), UBound(baKey) + 1)
    '--- success
    CryptoAeadAesGcmEncrypt = True
End Function

Public Function CryptoAeadAesGcmDecrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    If pvCryptoCallAesGcmDecrypt(m_uData.Pfn(ucsPfnAesGcmDecrypt), _
            baBuffer(lPos), _
            baBuffer(lPos), lSize - LNG_AESGCM_TAG_SIZE, _
            baBuffer(lPos + lSize - LNG_AESGCM_TAG_SIZE), _
            baAad(lAadPos), lAdSize, _
            baNonce(0), baKey(0), UBound(baKey) + 1) = 0 Then
        '--- success
        CryptoAeadAesGcmDecrypt = True
    End If
End Function

Public Sub CryptoRandomBytes(ByVal lPtr As Long, ByVal lSize As Long)
    Call CryptGenRandom(m_uData.hRandomProv, lSize, lPtr)
End Sub

'= BCrypt helpers ========================================================

#If ImplUseBCrypt Then
Private Function pvBCryptEcdhP256KeyPair(baPriv() As Byte, baPub() As Byte) As Boolean
    Dim hProv           As Long
    Dim hResult         As Long
    Dim sApiSource      As String
    Dim hKeyPair        As Long
    Dim baBlob()        As Byte
    Dim cbResult        As Long
    
    hResult = BCryptOpenAlgorithmProvider(hProv, StrPtr("ECDH_P256"), StrPtr("Microsoft Primitive Provider"), 0)
    If hResult < 0 Then
        sApiSource = "BCryptOpenAlgorithmProvider"
        GoTo QH
    End If
    hResult = BCryptGenerateKeyPair(hProv, hKeyPair, 256, 0)
    If hResult < 0 Then
        sApiSource = "BCryptGenerateKeyPair"
        GoTo QH
    End If
    hResult = BCryptFinalizeKeyPair(hKeyPair, 0)
    If hResult < 0 Then
        sApiSource = "BCryptFinalizeKeyPair"
        GoTo QH
    End If
    ReDim baBlob(0 To 1023) As Byte
    hResult = BCryptExportKey(hKeyPair, 0, StrPtr("ECCPRIVATEBLOB"), VarPtr(baBlob(0)), UBound(baBlob) + 1, cbResult, 0)
    If hResult < 0 Then
        sApiSource = "BCryptExportKey(ECCPRIVATEBLOB)"
        GoTo QH
    End If
    baPriv = pvBCryptFromKeyBlob(baBlob, cbResult)
    hResult = BCryptExportKey(hKeyPair, 0, StrPtr("ECCPUBLICBLOB"), VarPtr(baBlob(0)), UBound(baBlob) + 1, cbResult, 0)
    If hResult < 0 Then
        sApiSource = "BCryptExportKey(ECCPUBLICBLOB)"
        GoTo QH
    End If
    baPub = pvBCryptFromKeyBlob(baBlob, cbResult)
    '--- success
    pvBCryptEcdhP256KeyPair = True
QH:
    If hKeyPair <> 0 Then
        Call BCryptDestroyKey(hKeyPair)
    End If
    If hProv <> 0 Then
        Call BCryptCloseAlgorithmProvider(hProv, 0)
    End If
    If LenB(sApiSource) <> 0 Then
        Err.Raise IIf(Err.LastDllError < 0, Err.LastDllError, Err.LastDllError Or LNG_FACILITY_WIN32), sApiSource
    End If
End Function

Private Function pvBCryptEcdhP256AgreedSecret(baPriv() As Byte, baPub() As Byte) As Byte()
    Dim baRetVal()      As Byte
    Dim hProv           As Long
    Dim hPrivKey        As Long
    Dim hPubKey         As Long
    Dim hAgreedSecret   As Long
    Dim cbAgreedSecret  As Long
    Dim hResult         As Long
    Dim sApiSource      As String
    Dim baBlob()        As Byte
    
    hResult = BCryptOpenAlgorithmProvider(hProv, StrPtr("ECDH_P256"), StrPtr("Microsoft Primitive Provider"), 0)
    If hResult < 0 Then
        sApiSource = "BCryptOpenAlgorithmProvider"
        GoTo QH
    End If
    baBlob = pvBCryptToKeyBlob(baPriv)
    hResult = BCryptImportKeyPair(hProv, 0, StrPtr("ECCPRIVATEBLOB"), hPrivKey, VarPtr(baBlob(0)), UBound(baBlob) + 1, 0)
    If hResult < 0 Then
        sApiSource = "BCryptImportKeyPair(ECCPRIVATEBLOB)"
        GoTo QH
    End If
    baBlob = pvBCryptToKeyBlob(baPub)
    hResult = BCryptImportKeyPair(hProv, 0, StrPtr("ECCPUBLICBLOB"), hPubKey, VarPtr(baBlob(0)), UBound(baBlob) + 1, 0)
    If hResult < 0 Then
        sApiSource = "BCryptImportKeyPair(ECCPUBLICBLOB)"
        GoTo QH
    End If
    hResult = BCryptSecretAgreement(hPrivKey, hPubKey, hAgreedSecret, 0)
    If hResult < 0 Then
        sApiSource = "BCryptSecretAgreement"
        GoTo QH
    End If
    ReDim baRetVal(0 To 1023) As Byte
    hResult = BCryptDeriveKey(hAgreedSecret, StrPtr("TRUNCATE"), 0, VarPtr(baRetVal(0)), UBound(baRetVal) + 1, cbAgreedSecret, 0)
    If hResult < 0 Then
        sApiSource = "BCryptDeriveKey"
        GoTo QH
    End If
    ReDim Preserve baRetVal(0 To cbAgreedSecret - 1) As Byte
    pvArrayReverse baRetVal
    pvBCryptEcdhP256AgreedSecret = baRetVal
QH:
    If hAgreedSecret <> 0 Then
        Call BCryptDestroySecret(hAgreedSecret)
    End If
    If hPrivKey <> 0 Then
        Call BCryptDestroyKey(hPrivKey)
    End If
    If hPubKey <> 0 Then
        Call BCryptDestroyKey(hPubKey)
    End If
    If hProv <> 0 Then
        Call BCryptCloseAlgorithmProvider(hProv, 0)
    End If
    If LenB(sApiSource) <> 0 Then
        Err.Raise IIf(Err.LastDllError < 0, Err.LastDllError, Err.LastDllError Or LNG_FACILITY_WIN32), sApiSource
    End If
End Function

Private Function pvBCryptToKeyBlob(baKey() As Byte, Optional ByVal lSize As Long = -1) As Byte()
    Dim baRetVal()      As Byte
    Dim lMagic          As Long
    Dim lPartSize       As Long
    Dim lPos            As Long
    
    If lSize < 0 Then
        lSize = pvArraySize(baKey)
    End If
    If lSize = BCRYPT_SECP256R1_PUBLIC_KEY_SIZE Then
        Debug.Assert baKey(0) = BCRYPT_SECP256R1_PUBKEY_UNCOMPRESSED
        lMagic = BCRYPT_ECDH_PUBLIC_P256_MAGIC
        lPartSize = 32
        lPos = 1
    ElseIf lSize = BCRYPT_SECP256R1_PRIVATE_KEY_SIZE Then
        lMagic = BCRYPT_ECDH_PRIVATE_P256_MAGIC
        lPartSize = 32
    Else
        Err.Raise vbObjectError, "pvBCryptToKeyBlob", "Unrecognized key size"
    End If
    ReDim baRetVal(0 To 8 + lSize) As Byte
    Call CopyMemory(baRetVal(0), lMagic, 4)
    Call CopyMemory(baRetVal(4), lPartSize, 4)
    Call CopyMemory(baRetVal(8), baKey(lPos), lSize - lPos)
    pvBCryptToKeyBlob = baRetVal
End Function

Private Function pvBCryptFromKeyBlob(baBlob() As Byte, Optional ByVal lSize As Long = -1) As Byte()
    Dim baRetVal()      As Byte
    Dim lMagic          As Long
    Dim lPartSize       As Long
    
    If lSize < 0 Then
        lSize = pvArraySize(baBlob)
    End If
    Call CopyMemory(lMagic, baBlob(0), 4)
    Select Case lMagic
    Case BCRYPT_ECDH_PUBLIC_P256_MAGIC
        Call CopyMemory(lPartSize, baBlob(4), 4)
        Debug.Assert lPartSize = 32
        ReDim baRetVal(0 To BCRYPT_SECP256R1_PUBLIC_KEY_SIZE - 1) As Byte
        Debug.Assert lSize >= 8 + 2 * lPartSize
        baRetVal(0) = BCRYPT_SECP256R1_PUBKEY_UNCOMPRESSED
        Call CopyMemory(baRetVal(1), baBlob(8), 2 * lPartSize)
    Case BCRYPT_ECDH_PRIVATE_P256_MAGIC
        Call CopyMemory(lPartSize, baBlob(4), 4)
        Debug.Assert lPartSize = 32
        ReDim baRetVal(0 To BCRYPT_SECP256R1_PRIVATE_KEY_SIZE - 1) As Byte
        Debug.Assert lSize >= 8 + 3 * lPartSize
        Call CopyMemory(baRetVal(0), baBlob(8), 3 * lPartSize)
    Case Else
        Err.Raise vbObjectError, "pvBCryptFromKeyBlob", "Unknown BCrypt magic"
    End Select
    pvBCryptFromKeyBlob = baRetVal
End Function
#End If

'= private ===============================================================

Private Function pvArraySize(baArray() As Byte, Optional RetVal As Long) As Long
    Dim lPtr            As Long
    
    '--- peek long at ArrPtr(baArray)
    Call CopyMemory(lPtr, ByVal ArrPtr(baArray), 4)
    If lPtr <> 0 Then
        RetVal = UBound(baArray) + 1
    Else
        RetVal = 0
    End If
    pvArraySize = RetVal
End Function

Private Sub pvArrayReverse(baData() As Byte)
    Dim lIdx            As Long
    Dim bTemp           As Byte
    
    For lIdx = 0 To UBound(baData) \ 2
        bTemp = baData(lIdx)
        baData(lIdx) = baData(UBound(baData) - lIdx)
        baData(UBound(baData) - lIdx) = bTemp
    Next
End Sub

Private Function pvThunkAllocate(sText As String, Optional ByVal ThunkPtr As Long) As Long
    Static Map(0 To &H3FF) As Long
    Dim baInput()       As Byte
    Dim lIdx            As Long
    Dim lChar           As Long
    Dim lPtr            As Long
    
    If ThunkPtr <> 0 Then
        pvThunkAllocate = ThunkPtr
    Else
        pvThunkAllocate = VirtualAlloc(0, (Len(sText) \ 4) * 3, MEM_COMMIT, PAGE_EXECUTE_READWRITE)
        If pvThunkAllocate = 0 Then
            Exit Function
        End If
    End If
    '--- init decoding maps
    If Map(65) = 0 Then
        baInput = StrConv("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", vbFromUnicode)
        For lIdx = 0 To UBound(baInput)
            lChar = baInput(lIdx)
            Map(&H0 + lChar) = lIdx * (2 ^ 2)
            Map(&H100 + lChar) = (lIdx And &H30) \ (2 ^ 4) Or (lIdx And &HF) * (2 ^ 12)
            Map(&H200 + lChar) = (lIdx And &H3) * (2 ^ 22) Or (lIdx And &H3C) * (2 ^ 6)
            Map(&H300 + lChar) = lIdx * (2 ^ 16)
        Next
    End If
    '--- base64 decode loop
    baInput = StrConv(Replace(Replace(sText, vbCr, vbNullString), vbLf, vbNullString), vbFromUnicode)
    lPtr = pvThunkAllocate
    For lIdx = 0 To UBound(baInput) - 3 Step 4
        lChar = Map(baInput(lIdx + 0)) Or Map(&H100 + baInput(lIdx + 1)) Or Map(&H200 + baInput(lIdx + 2)) Or Map(&H300 + baInput(lIdx + 3))
        Call CopyMemory(ByVal lPtr, lChar, 3)
        lPtr = UnsignedAdd(lPtr, 3)
    Next
End Function

Private Sub pvPatchProto(ByVal Pfn As Long)
    Dim bInIDE          As Boolean
 
    Debug.Assert pvSetTrue(bInIDE)
    If bInIDE Then
        Call CopyMemory(Pfn, ByVal UnsignedAdd(Pfn, &H16), 4)
    Else
        Call VirtualProtect(Pfn, 8, PAGE_EXECUTE_READWRITE, 0)
    End If
    ' 0:  58                      pop    eax
    ' 1:  59                      pop    ecx
    ' 2:  50                      push   eax
    ' 3:  ff e1                   jmp    ecx
    ' 5:  90                      nop
    ' 6:  90                      nop
    ' 7:  90                      nop
    Call CopyMemory(ByVal Pfn, -802975883527609.7192@, 8)
End Sub

Private Function pvSetTrue(bValue As Boolean) As Boolean
    bValue = True
    pvSetTrue = True
End Function

'= trampolines ===========================================================

Private Function UnsignedAdd(ByVal lUnsignedPtr As Long, ByVal lSignedOffset As Long) As Long
    '--- note: safely add *signed* offset to *unsigned* ptr for *unsigned* retval w/o overflow in LARGEADDRESSAWARE processes
    UnsignedAdd = ((lUnsignedPtr Xor &H80000000) + lSignedOffset) Xor &H80000000
End Function

Private Function pvCryptoCallSecp256r1MakeKey(ByVal Pfn As Long, pPubKeyPtr As Byte, pPrivKeyPtr As Byte) As Long
    ' int ecc_make_key(uint8_t p_publicKey[ECC_BYTES+1], uint8_t p_privateKey[ECC_BYTES]);
End Function

Private Function pvCryptoCallSecp256r1SharedSecret(ByVal Pfn As Long, pPubKeyPtr As Byte, pPrivKeyPtr As Byte, pSecretPtr As Byte) As Long
    ' int ecdh_shared_secret(const uint8_t p_publicKey[ECC_BYTES+1], const uint8_t p_privateKey[ECC_BYTES], uint8_t p_secret[ECC_BYTES]);
End Function

Private Function pvCryptoCallCurve25519Multiply(ByVal Pfn As Long, pSecretPtr As Byte, pPubKeyPtr As Byte, pPrivKeyPtr As Byte) As Long
    ' void cf_curve25519_mul(uint8_t out[32], const uint8_t priv[32], const uint8_t pub[32])
End Function

Private Function pvCryptoCallCurve25519MulBase(ByVal Pfn As Long, pPubKeyPtr As Byte, pPrivKeyPtr As Byte) As Long
    ' void cf_curve25519_mul_base(uint8_t out[32], const uint8_t priv[32])
End Function

Private Function pvCryptoCallSha256Init(ByVal Pfn As Long, ByVal lCtxPtr As Long) As Long
    ' void cf_sha256_init(cf_sha256_context *ctx)
End Function

Private Function pvCryptoCallSha256Update(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lDataPtr As Long, ByVal lSize As Long) As Long
    ' void cf_sha256_update(cf_sha256_context *ctx, const void *data, size_t nbytes)
End Function

Private Function pvCryptoCallSha256Final(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lHashPtr As Long) As Long
    ' void cf_sha256_digest_final(cf_sha256_context *ctx, uint8_t hash[CF_SHA256_HASHSZ])
End Function

Private Function pvCryptoCallSha384Init(ByVal Pfn As Long, ByVal lCtxPtr As Long) As Long
    ' void cf_sha384_init(cf_sha384_context *ctx)
End Function

Private Function pvCryptoCallSha384Update(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lDataPtr As Long, ByVal lSize As Long) As Long
    ' void cf_sha384_update(cf_sha384_context *ctx, const void *data, size_t nbytes)
End Function

Private Function pvCryptoCallSha384Final(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lHashPtr As Long) As Long
    ' void cf_sha384_digest_final(cf_sha384_context *ctx, uint8_t hash[CF_SHA384_HASHSZ])
End Function

Private Function pvCryptoCallChacha20Poly1305Encrypt( _
            ByVal Pfn As Long, pKeyPtr As Byte, pNoncePtr As Byte, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, _
            pPlaintTextPtr As Byte, ByVal lPlaintTextSize As Long, _
            pCipherTextPtr As Byte, pTagPtr As Byte) As Long
    ' void cf_chacha20poly1305_encrypt(const uint8_t key[32], const uint8_t nonce[12], const uint8_t *header, size_t nheader,
    '                                  const uint8_t *plaintext, size_t nbytes, uint8_t *ciphertext, uint8_t tag[16])
End Function

Private Function pvCryptoCallChacha20Poly1305Decrypt( _
            ByVal Pfn As Long, pKeyPtr As Byte, pNoncePtr As Byte, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, _
            pCipherTextPtr As Byte, ByVal lCipherTextSize As Long, _
            pTagPtr As Byte, pPlaintTextPtr As Byte) As Long
    ' int cf_chacha20poly1305_decrypt(const uint8_t key[32], const uint8_t nonce[12], const uint8_t *header, size_t nheader,
    '                                 const uint8_t *ciphertext, size_t nbytes, const uint8_t tag[16], uint8_t *plaintext)
End Function

Private Function pvCryptoCallAesGcmEncrypt( _
            ByVal Pfn As Long, pCipherTextPtr As Byte, pTagPtr As Byte, pPlaintTextPtr As Byte, ByVal lPlaintTextSize As Long, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, pNoncePtr As Byte, pKeyPtr As Byte, ByVal lKeySize As Long) As Long
    ' void cf_aesgcm_encrypt(uint8_t *c, uint8_t *mac, const uint8_t *m, const size_t mlen, const uint8_t *ad, const size_t adlen,
    '                        const uint8_t *npub, const uint8_t *k, size_t klen)
End Function

Private Function pvCryptoCallAesGcmDecrypt( _
            ByVal Pfn As Long, pPlaintTextPtr As Byte, pCipherTextPtr As Byte, ByVal lCipherTextSize As Long, pTagPtr As Byte, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, pNoncePtr As Byte, pKeyPtr As Byte, ByVal lKeySize As Long) As Long
    ' void cf_aesgcm_decrypt(uint8_t *m, const uint8_t *c, const size_t clen, const uint8_t *mac, const uint8_t *ad, const size_t adlen,
    '                        const uint8_t *npub, const uint8_t *k, const size_t klen)
End Function
