Attribute VB_Name = "mdTlsThunks"
'=========================================================================
'
' Elliptic-curve cryptography thunks based on the following sources
'
'  1. https://github.com/esxgx/easy-ecc by Kenneth MacKay
'     BSD 2-clause license
'
'  2. https://github.com/ctz/cifra by Joseph Birr-Pixton
'     CC0 1.0 Universal license
'
'=========================================================================
Option Explicit
DefObj A-Z

'=========================================================================
' API
'=========================================================================

'--- for thunks
Private Const MEM_COMMIT                    As Long = &H1000
Private Const PAGE_EXECUTE_READWRITE        As Long = &H40
'--- for CryptAcquireContext
Private Const PROV_RSA_FULL                 As Long = 1
Private Const CRYPT_VERIFYCONTEXT           As Long = &HF0000000

Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
Private Declare Sub FillMemory Lib "kernel32" Alias "RtlFillMemory" (Destination As Any, ByVal Length As Long, ByVal Fill As Byte)
Private Declare Function VirtualAlloc Lib "kernel32" (ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long
Private Declare Function VirtualProtect Lib "kernel32" (ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flNewProtect As Long, ByRef lpflOldProtect As Long) As Long
Private Declare Function CryptAcquireContext Lib "advapi32" Alias "CryptAcquireContextW" (phProv As Long, ByVal pszContainer As Long, ByVal pszProvider As Long, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptReleaseContext Lib "advapi32" (ByVal hProv As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptGenRandom Lib "advapi32" (ByVal hProv As Long, ByVal dwLen As Long, ByVal pbBuffer As Long) As Long

'=========================================================================
' Constants and member variables
'=========================================================================

Private Const STR_GLOB                  As String = "////////////////AAAAAAAAAAAAAAAAAQAAAP////9LYNInPjzOO/awU8ywBh1lvIaYdlW967Pnkzqq2DXGWpbCmNhFOaH0oDPrLYF9A3fyQKRj5ea8+EdCLOHy0Rdr9VG/N2hAtsvOXjFrVzPOKxaeD3xK6+eOm38a/uJC409RJWP8wsq584SeF6et+ua8//////////8AAAAA/////5gvikKRRDdxz/vAtaXbtelbwlY58RHxWaSCP5LVXhyrmKoH2AFbgxK+hTEkw30MVXRdvnL+sd6Apwbcm3Txm8HBaZvkhke+78adwQ/MoQwkbyzpLaqEdErcqbBc2oj5dlJRPphtxjGoyCcDsMd/Wb/zC+DGR5Gn1VFjygZnKSkUhQq3JzghGy78bSxNEw04U1RzCmW7Cmp2LsnCgYUscpKh6L+iS2YaqHCLS8KjUWzHGeiS0SQGmdaFNQ70cKBqEBbBpBkIbDceTHdIJ7W8sDSzDBw5SqrYTk/KnFvzby5o7oKPdG9jpXgUeMiECALHjPr/vpDrbFCk96P5vvJ4ccYirijXmC+KQs1l7yORRDdxLztN7M/7wLW824mBpdu16Ti1SPNbwlY5GdAFtvER8VmbTxmvpII/khiBbdrVXhyrQgIDo5iqB9i+b3BFAVuDEoyy5E6+hTEk4rT/1cN9DFVviXvydF2+crGWFjv+sd6ANRLHJacG3JuUJmnPdPGbwdJK8Z7BaZvk4yVPOIZHvu+11YyLxp3BD2WcrHfMoQwkdQIrWW8s6S2D5KZuqoR0StT7Qb3cqbBctVMRg9qI+Xar32buUlE+mBAytC1txjGoPyH7mMgnA7DkDu++x39Zv8KPqD3zC+DGJacKk0eRp9VvggPgUWPKBnBuDgpnKSkU/C/S" & _
                                                    "RoUKtycmySZcOCEbLu0qxFr8bSxN37OVnRMNOFPeY6+LVHMKZaiydzy7Cmp25q7tRy7JwoE7NYIUhSxykmQD8Uyh6L+iATBCvEtmGqiRl/jQcItLwjC+VAajUWzHGFLv1hnoktEQqWVVJAaZ1iogcVeFNQ70uNG7MnCgahDI0NK4FsGkGVOrQVEIbDcemeuO30x3SCeoSJvhtbywNGNaycWzDBw5y4pB40qq2E5z42N3T8qcW6O4stbzby5o/LLvXe6Cj3RgLxdDb2OleHKr8KEUeMiE7DlkGggCx4woHmMj+v++kOm9gt7rbFCkFXnGsvej+b4rU3Lj8nhxxpxhJurOPifKB8LAIce4htEe6+DN1n3a6njRbu5/T331um8Xcqpn8AammMiixX1jCq4N+b4EmD8RG0ccEzULcRuEfQQj9XfbKJMkx0B7q8oyvL7JFQq+njxMDRCcxGcdQ7ZCPsu+1MVMKn5l/Jwpf1ns+tY6q2/LXxdYR0qMGURsZXhwYW5kIDE2LWJ5dGUgawBleHBhbmQgMzItYnl0ZSBrAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwAAABjfHd78mtvxTABZyv+16t2yoLJffpZR/Ct1KKvnKRywLf9kyY2P/fMNKXl8XHYMRUExyPDGJYFmgcSgOLrJ7J1CYMsGhtuWqBSO9azKeMvhFPRAO0g/LFbasu+OUpMWM/Q76r7Q00zhUX5An9QPJ+oUaNAj5KdOPW8ttohEP/z0s0ME+xfl0QXxKd+PWRdGXNggU/cIiqQiEbuuBTeXgvb4DI6CkkGJFzC06xikZXkeefIN22N1U6pb" & _
                                                    "Fb06mV6rgi6eCUuHKa0xujddB9LvYuKcD61ZkgD9g5hNVe5hsEdnuH4mBFp2Y6Umx6H6c5VKN+MoYkNv+ZCaEGZLQ+wVLsWjQECBAgQIECAGzZSCWrVMDalOL9Ao56B89f7fOM5gpsv/4c0jkNExN7py1R7lDKmwiM97kyVC0L6w04ILqFmKNkksnZboklti9Elcvj2ZIZomBbUpFzMXWW2kmxwSFD97bnaXhVGV6eNnYSQ2KsAjLzTCvfkWAW4s0UG0Cwej8o/DwLBr70DAROKazqREUFPZ9zql/LPzvC05nOWrHQi5601heL5N+gcdd9uR/EacR0pxYlvt2IOqhi+G/xWPkvG0nkgmtvA/njNWvQf3agziAfHMbESEFkngOxfYFF/qRm1Sg0t5Xqfk8mc76DgO02uKvWwyOu7PINTmWEXKwR+unfWJuFpFGNVIQx9AAAAAAA=" ' 1688, 18.4.2020 22:09:32
Private Const STR_THUNK1                As String = "cC4AAFAxAAAAGgAAIB0AAAAnAABQJwAAMCUAAMAnAABQKAAAkCcAACAZAADgGAAAMA4AALANAADMzMzMzMzMzOgAAAAAWC1FQBwABQBAHACLAMPMzMzMzMzMzMzMzMzM6AAAAABYLWVAHAAFAEAcAMPMzMzMzMzMzMzMzMzMzMxVi+yD7EhTi10QU+jATgAAhcAPhSkBAABWi3UMjUXYV1ZQ6AlVAACLfQiNRdhQV41FuFDoyFQAAI1F2FBQ6O5UAABTVlbotlQAAFNT6N9UAADoav///1BTV1foIVIAAOhc////UFNTU+gTUgAA6E7///9QU1dT6OVUAABTV1fofVQAAOg4////UFdXU+jvUQAA6Cr///9QU1dX6OFRAABqAFfoaVoAAAvCdCDoEP///1BXV+gYTAAAV4vw6LBWAADB5h8JdxyLdQzrBlfon1YAAFdT6FhUAADo4/7//1CNRbhQU1Pod1QAAOjS/v//UI1FuFBTU+hmVAAA6MH+//9QU41FuFBQ6FVUAACNRbhQV1fo6lMAAOil/v//UI1F2FBXUOg5VAAAU1foolYAAFZT6JtWAACNRdhQVuiRVgAAX15bi+VdwgwAzMzMzMzMzMxVi+xWi3UIVuhzTQAAhcB0F41GIFDoZk0AAIXAdAq4AQAAAF5dwgQAM8BeXcIEAMxVi+yB7KgAAABTi10MjUW4VldTUOg3VgAAjUMgUIlF+I2FeP///1DoJFYAAP91FI2FWP///1CNRZhQjYV4////UI1FuFDohgMAAItdEFPoHVUAAIPoAolFFIXAflsPHwBQU+gpWQAAC8J1B7gBAAAA6wIzwMHgBY2dWP///wPYjU2YA8iNtXj///9T99iJTfxRA/CNfbgD+FZX6OEBAABWV1P/" & _
                                                    "dfzo9gAAAItFFItdEEiJRRSFwH+oagBT6NBYAAALwnUFjUgB6wIzycHhBY2dWP///wPZiU0QU41FmAPBjb14////UCv5jXW4K/FXVuiMAQAA6Ef9//9QjUWYUI1FuFCNRdhQ6NVSAABXjUXYUFDoalIAAP91DI1F2FBQ6F1SAADoGP3//1CNRdhQUOgNUAAA/3X4jUXYUFDoQFIAAFaNRdhQUOg1UgAAV1aNRZgDRRBTUOhGAAAAjUXYUI2FWP///1CNRZhQ6KIFAACLdQiNRZhQVujVVAAAjYVY////UI1GIFDoxVQAAF9eW4vlXcIQAMzMzMzMzMzMzMzMzFWL7IPsIFNWV+iS/P//i10Ii3UQUFNWjUXgUOggUgAAjUXgUFDo5lEAAI1F4FBTU+irUQAAjUXgUFZW6KBRAADoW/z//4t1DIt9FFBWV1fo7FEAAFeNReBQ6LJRAADoPfz//1BTjUXgUFDo0VEAAOgs/P//UItFEFCNReBQUOi9UQAA6Bj8//9Qi0UQU1BQ6KxRAACLRRBQVlboQVEAAOj8+///UI1F4FBTi10QU+iNUQAAU1dX6CVRAADo4Pv//1BWV1fod1EAAI1F4FBT6N1TAABfXluL5V3CEADMzMzMVYvsg+xgU1ZX6LL7//+LXQiLfRBQU1eNRcBQ6EBRAACNRcBQUOgGUQAAjUXAUFNT6MtQAACNRcBQV1fowFAAAOh7+///i10Mi3UUUFNWjUXAUOgpTgAA6GT7//9QU1ZW6PtQAADoVvv//1D/dQiNReBXUOjoUAAAjUXgUFNT6H1QAADoOPv//1BX/3UIjUXgUOjqTQAAVlfok1AAAOge+///UI1F4FBXV+iyUAAA6A37//9QV4t9CI1FoFdQ6J5QA" & _
                                                    "ACNRaBQVlboM1AAAOju+v//UFNWVuiFUAAAjUXAUI1FoFDoSFAAAOjT+v//UI1F4FCNRaBQUOhkUAAA6L/6//9QV41FoFCNReBQ6FBQAACNRcBQjUXgUFDo4k8AAOid+v//UFONReBQU+gxUAAAjUWgUFfol1IAAF9eW4vlXcIQAMzMzMzMzMzMzMzMzMzMVYvsg+wgVot1CFdW/3UQ6GxSAACLfQxX/3UU6GBSAACNReBQ6JdIAACLRRjHReABAAAAx0XkAAAAAIXAdApQjUXgUOg4UgAAjUXgUFdW6O0CAACNReBQV1boUvr//41F4FD/dRT/dRDo0wIAAF9ei+VdwhQAzMzMzMzMzMzMzMxTi0QkDItMJBD34YvYi0QkCPdkJBQD2ItEJAj34QPTW8IQAMzMzMzMzMzMzMzMzMyA+UBzFYD5IHMGD6XC0+DDi9AzwIDhH9PiwzPAM9LDzID5QHMVgPkgcwYPrdDT6sOLwjPSgOEf0+jDM8Az0sPMVYvsi0UQU1aLdQiNSHhXi30MjVZ4O/F3BDvQcwuNT3g78XcwO9dyLCv4uxAAAAAr8IsUOAMQi0w4BBNIBI1ACIlUMPiJTDD8g+sBdeRfXltdwgwAi9eNSBCL3ivQK9gr/rgEAAAAjXYgjUkgDxBB0A8QTDfgZg/UyA8RTuAPEEwK4A8QQeBmD9TIDxFMC+CD6AF10l9eW13CDADMzMzMzFWL7ItVHIPsCItFIFaLdQhXi30MA9cTRRCJFolGBDtFEHcPcgQ713MJuAEAAAAzyesOD1fAZg8TRfiLTfyLRfgDRSRfE00oA0UUiUYIi8YTTRiJTgxei+VdwiQAzMzMzFWL7ItVDItNCIsCMQGLQgQxQQSLQggxQQiLQgwxQQ" & _
                                                    "xdwggAzMzMzMzMzMzMzMzMzFWL7IPsCItNCItVEFNWiwGNWQTB6gIz9olVEIld+I0EhQQAAACJRfxXhdJ0QotVDIt9EIPCAmZmDx+EAAAAAAAPtkr+jVIED7ZC+8HhCAvID7ZC/MHhCAvID7ZC/cHhCAvIiQyzRjv3ctaLRfyL17kBAAAAM/+JTQw78A+DjQAAAIvGK8KNBIOJRQgPH0QAAItcs/w7+nUIQTP/iU0M6wSF/3Ut6Kf3//8FiAQAAMHDCFBT6IhDAACL2OiR9///i00MD7aECIgFAADB4Bgz2Osdg/oGdh6D/wR1Gehw9///BYgEAABQU+hUQwAAi9iLRQiLVRCLCEczy4PABItd+IlFCIkMs0aLTQw7dfxygl9eW4vlXcIMAMzMzMzMzMzMzFWL7IPsII1F4P91EFDojkwAAI1F4FCLRQhQUOhQTAAA/3UQjUXgUFDoQ0wAAI1F4FCLRQxQUOg1TAAAi+VdwgwAzMzMzMzMzMzMzMzMzMzMVYvsg+wgU1aLdQgzyVeJTeyBBM4AAAEAiwTOg1TOBACLXM4ED6zYEMH7EIlF6IP5D3UVx0X8AQAAAIvQx0XwAAAAAIld+OsiD1fAZg8TRfSLRfiJRfCLRfRmDxNF4ItV4IlF/ItF5IlF+IP5D415AWoAG8D32A+vxytV/GoljTTGi0X4G0XwUFLoYvz//4tN6APBE9OD6AGD2gABBotF7BFWBIt1CA+kyxDB4RApDMaLz4lN7BlcxgSD+RAPgk////9fXluL5V3CBADMzMzMzFWL7IPsEItVDFZXD7YKD7ZCAcHhCAvID7ZCAsHhCAvID7ZCA8HhCAvID7ZCBYlN8A+2SgTB4QgLyA+2QgbB4QgLyA+2QgfB4QgLyA+" & _
                                                    "2QgmJTfQPtkoIweEIC8gPtkIKweEIC8gPtkILweEIC8gPtkIMiU34D7ZKDcHgCAvID7ZCDsHhCAvID7ZCD8HhCAvIiU38i00IizmNcQSLx8HgBAPwjUXwVlDo5fz//4PuEIPH/3QtjUXwUOhEKgAAjUXwUOjbKgAAVo1F8FDowfz//41F8FDo6CkAAIPuEIPvAXXTjUXwUOgXKgAAjUXwUOiuKgAAVo1F8FDolPz//4t1EItV8IvCi030wegYiAaLwsHoEIhGAYvCwegIiEYCi8HB6BiIVgOIRgSLwcHoEIhGBYvBwegIiEYGiE4Hi034i8HB6BiIRgiLwcHoEIhGCYvBwegIiEYKiE4Li038i8HB6BiIRgyLwcHoEIhGDYvBwegIiEYOX4hOD16L5V3CDADMzFWL7IPsEFNWV4tVDItdCA+2Cg+2QgHB4QiNcwQLyA+2QgLB4QgLyA+2QgPB4QgLyA+2QgWJTfAPtkoEweEIC8gPtkIGweEIC8gPtkIHweEIC8gPtkIJiU30D7ZKCMHhCAvID7ZCCsHhCAvID7ZCC8HhCAvID7ZCDIlN+A+2Sg3B4AgLyA+2Qg7B4QgLyA+2Qg/B4QgLyI1F8FZQiU386G37//+/AQAAAIPGEDk7di6QjUXwUOhXPwAAjUXwUOjuPQAAjUXwUOhVKgAAVo1F8FDoO/v//0eDxhA7O3LTjUXwUOgqPwAAjUXwUOjBPQAAVo1F8FDoF/v//4t1EItV8IvCi030wegYiAaLwsHoEIhGAYvCwegIiEYCi8HB6BiIVgOIRgSLwcHoEIhGBYvBwegIiEYGiE4Hi034i8HB6BiIRgiLwcHoEIhGCYvBwegIiEYKiE4Li038i8HB6BiIRgyLwcHoEIhGDYvB" & _
                                                    "wegIiEYOX4hOD15bi+VdwgwAzMzMzFWL7FaLdQho9AAAAGoAVugsKQAAi0UQg8QMg/gQdDyD+Bh0IYP4IHQG/xXUsBwAaiD/dQzHBg4AAABW6ID6//9eXcIMAGoY/3UMxwYMAAAAVuhq+v//Xl3CDABqEP91DMcGCgAAAFboVPr//15dwgwAzMzMzMzMzMzMzMzMzMzMVYvsgewAAQAAVuih8v//vrBLHACB7gBAHAAD8OiP8v///3UouTBKHADHRfQQAAAA/3UkgekAQBwAiXX4A8GJRfyNhQD///9Q6DP/////dQiNhQD///9qEP91FGoM/3Ug/3Uc/3UY/3UQ/3UMUI1F9FDoOg8AAF6L5V3CJADMzMxVi+yB7AABAABW6CHy//++sEscAIHuAEAcAAPw6A/y////dSi5MEocAMdF9BAAAAD/dSSB6QBAHACJdfgDwYlF/I2FAP///1Dos/7//2oQ/3UMjYUA/////3UIagz/dSD/dRz/dRj/dRT/dRBQjUX0UOiqEAAAXovlXcIkAMzMzFWL7FFTi10YM8CJRfyF23Rxi1UQi00MVsdFGAEAAABXizmL8iv3O94PQvOFwHUdD7ZFFFZQi0UIA8dQ6IAnAACLTQyDxAyLRfyLVRCF/3UJO/IPREUYiUX8jQQ+O8J1F/91CP91IP9VHItNDItVEMcBAAAAAOsCATGLRfwr3nWgX15bi+VdwhwAzMzMzMzMzFWL7FaLdSCLxoPoAHRgg+gBD4SsAAAAU4PoAVeNRRR0bYt9KItdJFdTagFQ/3UQ/3UM/3UI6LYAAACLTRhXUzhNHHQvjUb+i3UQUFFW/3UM/3UI6Bj///9XU2oBjUUcUFb/dQz/dQjohAAAAF9bXl3CJACNRv+Ld" & _
                                                    "RBQUVb/dQz/dQjo6f7//19bXl3CJAD/dSiLXRD/dSSLfQyLdQhqAVBTV1boSAAAAP91KI1FHP91JGoBUFNXVug0AAAAX1teXcIkAP91KIpFHP91JDBFFI1FFGoBUP91EP91DP91COgNAAAAXl3CJADMzMzMzMzMzFWL7P91IItFHFBQ/3UY/3UU/3UQ/3UM/3UI6BEAAABdwhwAzMzMzMzMzMzMzMzMzFWL7ItNDItFJFOLXRSLEVaLdRhXhdJ0WYX2dFWLRRCL/ivCO8YPQviLwgNFCFdTUOirJQAAi0UMA98r94PEDAE4i30QOTiLRSR1Kf91CFCF9nUN/1Ugi00Mi0UkiTHrFP9VHItNDItFJMcBAAAAAOsDi30QO/dyGVNQO/d1Bf9VIOsD/1Uci0UkK/cD3zv3c+eF9nQui0UMiwiLxyvBi/47xg9C+ItFCFcDwVNQ6C4lAACLRQwD34PEDAE4K/eLfRB11V9eW13CIADMzMzMzMxVi+yLTRyD7AhXi30Yhcl0dlOLXQxWgzsAdRH/dQj/dST/VSCLRRCLTRyJA4sDi/GLVRAr0DvBiVUYD0LwM8CJdfyF9nQvi10UK9+JXfhmkIt1/I0UOIoME4tVGANVCItd+DIMAo0UOECICjvGcuGLXQyLTRwpMyvOAXUUA/6JTRyFyXWRXltfi+VdwiAAzMxVi+zomO7//7mgWBwAgekAQBwAA8GLTQhRUP91FI1BdP91EP91DGpAUI1BNFDoPv///13CEADMzMzMzMzMzMzMVYvsg+xsi00UU1ZXD7ZZAw+2QQIPtlEHweIIweMIC9gPtkEBweMIC9gPtgHB4wgL2A+2QQYL0Ild2MHiCA+2QQUL0A+2QQTB4ggL0A+2QQqJVfSJVd" & _
                                                    "QPtlELweIIC9APtkEJweIIC9APtkEIweIIC9APtkEOiVXwiVXQD7ZRD8HiCAvQD7ZBDcHiCAvQD7ZBDItNCMHiCAvQiVX4D7ZBAolVzA+2UQPB4ggL0A+2QQHB4ggL0A+2AcHiCAvQD7ZBBolV7IlVyA+2UQfB4ggL0A+2QQXB4ggL0A+2QQTB4ggL0A+2QQqJVeiJVcQPtlELweIIC9DB4ggPtkEJC9APtkEIweIIC9APtkEOiVXkiVXAD7ZRD8HiCAvQD7ZBDcHiCAvQD7ZBDItNDMHiCAvQiVXgD7ZBAolVvA+2UQPB4ggL0A+2QQHB4ggL0A+2AcHiCAvQD7ZBBolVCIlVuA+2UQfB4ggL0A+2QQXB4ggL0A+2QQTB4ggL0A+2QQqJVRSJVbQPtlELweIIC9APtkEJweIIC9APtkEIweIIC9APtkEOiVUMiVWwD7ZRD8HiCAvQD7ZBDcHiCAvQD7ZBDMHiCAvQiVX8iVWsi1UQD7ZKAw+2QgLB4QgLyA+2QgHB4QgLyA+2AsHhCAvIiU3ciU2oD7ZyBw+2QgYPtnoLD7ZKDsHmCAvwwecID7ZCBcHmCAvwx0WYCgAAAA+2QgTB5ggL8A+2QgoL+Il1pA+2QgnB5wgL+A+2QgjB5wgL+A+2Qg/B4AgLwYl9oA+2Sg3B4AgLwQ+2SgyLVdzB4AgLwYtN7IlFnOsDi10QA9mLTQgz04ldEMHCEAPKiU0IM03swcEMA9kz04ldEItdCMHCCAPaiVXci1X0A1XoM/KJXQgz2cHGEItNFAPOwcMHiU0UM03owcEMA9Ez8olV9ItVFMHGCAPWiXXsi3XwA3XkM/6JVRQz0cHHEItNDAPPwcIHiU0MM03kwcEMA/Ez/ol18It1DMHHCAP" & _
                                                    "3iX2Ui334A33gM8eJdQwz8cHAEItN/APIwcYHiU38M03gwcEMA/kzx4l9+It9/MHACAP4iX38M/mLTRADysHHBzPBiU0Qi00MwcAQA8iJTQwzyotVEMHBDAPRM8KJVRCLVQzBwAgD0IlVDDPRi030A87BwgeJTfSJVeiLVdwz0YtN/MHCEAPKiU38M86LdfTBwQwD8TPWiXX0i3X8wcIIA/KJdfwz8YtN8APPwcYHiU3wiXXki3XsM/GLTQjBxhADzolNCDPPi33wwcEMA/kz94l98It9CMHGCAP+iX0IM/mLTfgDy8HHB4l94It9lDP5iU34i00UwccQA8+JTRQzy4td+MHBDAPZM/uJXfjBxwgBfRSLXRQz2YvLiV3swcEHg22YAYtd+IlN7A+FQP7//wFFnAFdzItN2ANNEAFVqItVGIlN2Itd2IvDi03UA030iBqJTdSLTdADTfDB6AiIQgGLw4lN0ItN7AFNyItNxANN6MHoEIhCAsHrGIhaA4td1IvDiFoEwegIiEIFi8OJTcSLTcADTeTB6BCIQgaJTcCLTbwDTeABdaQBfaDB6xiIWgeLXdCLw4haCIlNvItNuANNCMHoCIhCCYvDiU24i020A00UwegQiEIKwesYiFoLi13Mi8OJTbSLTbADTQyIWgzB6AiIQg2Lw4lNsItNrANN/MHoEIhCDsHrGIhaD4tdyIvDiU2siFoQwegIiEIRi8PB6BCIQhLB6xiIWhOLXcSLw4haFMHoCIhCFYvDwegQiEIWwesYiFoXi13Ai8OIWhjB6AiIQhmLw8HoEIhCGsHrGIhaG4tdvIvDiFocwegIiEIdi8PB6BCIQh7B6xiIWh+LXbiLw4haIMHoCIhCIYvDwegQiEIiwesYiFoj" & _
                                                    "i120i8OIWiTB6AiIQiWLw8HoEIhCJsHrGIhaJ4tdsIvDiFoowegIiEIpi8PB6BCIQirB6xiIWiuL2YhaLIvDwegIiEIti8PB6BCIQi7B6xiIWi+LXaiLw4haMMHoCIhCMY1KPIvDwesYwegQiEIyiFozi12ki8OIWjTB6AiIQjWLw8HoEIhCNsHrGIhaN4tdoIvDiFo4wegIiEI5i8PB6BCIQjrB6xiIWjuLVZyLwsHoCIgRiEEBi8JfwegQweoYXohBAohRA1uL5V3CFADMVYvsVv91EIt1CP91DFborSsAAGoQ/3UUjUYgUOi/HQAAi0UYg8QMx0Z0AAAAAIlGeF5dwhQAzMzMzMzMzMzMzFWL7FaLdQhX/3UM/3YwjX4gV41GEFBW6ET5//+LVngzwIAHAXULQDvCdAaABDgBdPVfXl3CCADMzMzMzMzMzMxVi+yD7BCNRfBqEP91IFDoTB0AAIPEDI1F8FBqAP91JP91HP91GP91FP91EP91DP91COg5JgAAi+VdwiAAzMzMVYvs/3UkagH/dSD/dRz/dRj/dRT/dRD/dQz/dQjoDiYAAF3CIADMzMzMzMzMzMzMVYvs6Ajn//+5IGwcAIHpAEAcAAPBi00IUVD/dRSLAf91EP91DP8wjUEoUI1BGFDorPf//13CEADMzMzMzMzMzFWL7ItNCItFDIlBLItFEIlBMF3CDADMzMzMzMzMzMzMVYvsVot1CGo0agBW6K8cAACLTQzHRiwAAAAAiwGJRjCLRRCJRgSNRgiJDsdGKAAAAAD/Mf91FFDoUxwAAIPEGF5dwhAAzMzMzMzMzMzMzMxVi+yB7CAEAABTVldqcI2FcP3//8eFYP3//0HbAABqAFDHhWT9//8AAAAAx4Vo/" & _
                                                    "f//AQAAAMeFbP3//wAAAADoLBwAAIt1DI2FYP///2ofVlDo6hsAAIpGH4PEGIClYP////gkPwxAiIV/////jYXg+////3UQUOgEMgAAD1fAjbVg/v//Zg8ThWD+//+NvWj+//+5HgAAAGYPE0WA86W5HgAAAGYPE4Xg/v//jXWAx4Vg/v//AQAAAI19iMeFZP7//wAAAADzpbkeAAAAx0WAAQAAAI214P7//8dFhAAAAACNvej+//+7/gAAAPOluSAAAACNteD7//+NveD9///zpYvDD7bLwfgDg+EHD7a0BWD///+NheD9///T7oPmAVZQjUWAUOjWJwAAVo2FYP7//1CNheD+//9Q6MInAACNheD+//9QjUWAUI2F4Pz//1Doa+v//42F4P7//1CNRYBQUOi6LwAAjYVg/v//UI2F4P3//1CNheD+//9Q6EDr//+NhWD+//9QjYXg/f//UFDojC8AAI2F4Pz//1CNhWD+//9Q6FkvAACNRYBQjYVg/P//UOhJLwAAjUWAUI2F4P7//1CNRYBQ6OUbAACNheD8//9QjYXg/f//UI2F4P7//1DoyxsAAI2F4P7//1CNRYBQjYXg/P//UOjE6v//jYXg/v//UI1FgFBQ6BMvAACNRYBQjYXg/f//UOjjLgAAjYVg/P//UI2FYP7//1CNheD+//9Q6OkuAACNhWD9//9QjYXg/v//UI1FgFDoYhsAAI2FYP7//1CNRYBQUOhh6v//jUWAUI2F4P7//1BQ6EAbAACNhWD8//9QjYVg/v//UI1FgFDoKRsAAI2F4Pv//1CNheD9//9QjYVg/v//UOgPGwAAjYXg/P//UI2F4P3//1DoTC4AAFaNheD9//9QjUWAUOg7JgAAVo2FYP7//1" & _
                                                    "CNheD+//9Q6CcmAACD6wEPiR/+//+NheD+//9QUOhRFwAAjYXg/v//UI1FgFBQ6LAaAACNRYBQ/3UI6AQdAABfXluL5V3CDADMzMzMzMzMzMzMzFWL7IPsII1F4MZF4AlQ/3UMD1fAx0X5AAAAAP91CA8RReFmx0X9AABmD9ZF8cZF/wDoqvz//4vlXcIIAMzMzMxVi+yB7BQBAABTi10IjUXwVleLfQwPV8BQUItDBFfGRfAAZg/WRfHHRfkAAAAAZsdF/QAAxkX/AP/Qi3Ukg/4MdSBW/3UgjUXQUOiRGAAAg8QMZsdF3QAAxkXcAMZF3wHrMI1F8FCNhez+//9Q6D4WAABW/3UgjYXs/v//UOheFAAAjUXQUI2F7P7//1DoDhUAAI1F8FCNhTz///9Q6A4WAAD/dRyNhTz/////dRhQ6AwUAACNRdDGReAAUFdTjUWMx0XpAAAAAA9XwGbHRe0AAFBmD9ZF4cZF7wDocPv//2oEagyNRYxQ6EP7//9qEI1F4FBQjUWMUOjz+v///3UUjYU8/////3UQUOjREwAAjUXAUI2FPP///1DogRQAAIt1LI1F4FZQjUXAUFDoPz0AADLSjU3AuwEAAACF9nQai30oi8Er+IoED41JATJB/wrQK/N18YTSdRT/dRSNRYz/dTD/dRBQ6IX6//8z22oQjUXwagBQ6JYXAACKRfBqEI1F0GoAUOiGFwAAikXQahCNReBqAFDodhcAAIpF4GoQjUXAagBQ6GYXAACKRcBqUI2FPP///2oAUOhTFwAAio08////jUWMajRqAFDoQBcAAIpNjIPESIvDX15bi+VdwiwAzMzMzMzMzMzMzMzMzMzMVYvsgewUAQAAU4tdCI1F8FZXi30MD1fAUFC" & _
                                                    "LQwRXxkXwAGYP1kXxx0X5AAAAAGbHRf0AAMZF/wD/0It1JIP+DHUgVv91II1F0FDooRYAAIPEDGbHRd0AAMZF3ADGRd8B6zCNRfBQjYXs/v//UOhOFAAAVv91II2F7P7//1DobhIAAI1F0FCNhez+//9Q6B4TAACNRfBQjYU8////UOgeFAAA/3UcjYU8/////3UYUOgcEgAAjUXQxkXgAFBXU41FjMdF6QAAAAAPV8Bmx0XtAABQZg/WReHGRe8A6ID5//9qBGoMjUWMUOhT+f//ahCNReBQUI1FjFDoA/n//4t9FI1FjIt1KFdW/3UQUOjv+P//V1aNhTz///9Q6NERAACNRcDGRcAAUI2FPP///8dFyQAAAAAPV8Bmx0XNAABQZg/WRcHGRc8A6GQSAAD/dTCNReBQjUXAUP91LOghOwAAahCNRfBqAFDotBUAAIpF8GoQjUXQagBQ6KQVAACKRdBqEGoAjUXgUOiUFQAAikXgahCNRcBqAFDohBUAAIpFwGpQjYU8////agBQ6HEVAACKhTz///9qNI1FjGoAUOheFQAAikWMg8RIX15bi+VdwiwAzMzMzMzMzMzMzMzMzMzMVYvsi1UMi00QVot1CIsGMwKJAYtGBDNCBIlBBItGCDNCCIlBCItGDDNCDIlBDF5dwgwAzMzMzMzMzMzMzMzMzFWL7FFTi10MVleLfQhmx0X8AOGLD4vB0eiD4QGJA4tXBIvC0eiD4gHB4R8LyMHiH4lLBIt3CIvG0eiD5gEL0MHmH4lTCItPDIvB0eiD4QEL8F+JcwwPtkQN/MHgGDEDXluL5V3CCADMzMzMzMzMzMxVi+yLVQxWi3UID7YOD7ZGAcHhCAvID7ZGAsHhCAvID7ZGA8HhCAvI" & _
                                                    "iQoPtk4ED7ZGBcHhCAvID7ZGBsHhCAvID7ZGB8HhCAvIiUoED7ZOCA+2RgnB4QgLyA+2RgrB4QgLyA+2RgvB4QgLyIlKCA+2TgwPtkYNweEIC8gPtkYOweEIC8gPtkYPweEIC8iJSgxeXcIIAMzMzMzMzMzMzMzMVYvsg+wgVldqEI1F4GoAUOjbEwAAahD/dQyNRfBQ6J0TAACLfQiDxBgPEE3gM/aQi8a5HwAAAIPgHyvIi8bB+AWLBIfT6KgBdAwPEEXwZg/vyA8RTeCNRfBQUOiQ/v//RoH+gAAAAHzHahCNReBQ/3UQ6EkTAACDxAxfXovlXcIMAMzMzMzMzMzMzMzMzMzMVYvsVot1DFeLfQiLF4vCwegYiAaLwsHoEIhGAYvCwegIiEYCiFYDi08Ei8HB6BiIRgSLwcHoEIhGBYvBwegIiEYGiE4Hi08Ii8HB6BiIRgiLwcHoEIhGCYvBwegIiEYKiE4Li08Mi8HB6BiIRgyLwcHoEIhGDYvBwegIiEYOX4hOD15dwggAzMzMzMzMzMzMVYvsg+xEVot1CIO+qAAAAAB0BlboRxkAADPJDx9EAAAPtoQOiAAAAIlEjbxBg/kQcu5Wx0X8AAAAAOghGAAAjUW8UFbotxcAAItVDDPJZpCKBI6IBBFBg/kQcvRorAAAAGoAVuhnEgAAigaDxAxei+VdwggAzMzMzMzMzMzMzMxVi+xWi3UIaKwAAABqAFboPBIAAItNDGoQ/3UQD7YBiUZED7ZBAYlGSA+2QQKJRkwPtkEDg+APiUZQD7ZBBCX8AAAAiUZUD7ZBBYlGWA+2QQaJRlwPtkEHg+APiUZgD7ZBCCX8AAAAiUZkD7ZBCYlGaA+2QQqJRmwPtkELg+APiUZwD7ZBD"
Private Const STR_THUNK2                As String = "CX8AAAAiUZ0D7ZBDYlGeA+2QQ6JRnwPtkEPg+APx4aEAAAAAAAAAImGgAAAAI2GiAAAAFDoYREAAIPEGF5dwgwAzMzMzMzMzMzMVYvs6Gjb//+5EH8cAIHpAEAcAAPBi00IUVD/dRCNgagAAAD/dQxqEFCNgZgAAABQ6Avr//9dwgwAzMzMzMzMzFWL7IPsGFNWV+gi2////3UIvqCEHAC5QAAAAIHuAEAcAAPwi0UIVo14ZItAYPfhAweL2IPSAIPACIPgPyvIUWoAagBogAAAAGpAV4t9CA+k2gOJVfyNRyDB4wNQiVX46Kzp//+LVfyLy4vCiF3vwegYiEXoi8LB6BCIRemLwsHoCIhF6opF+IhF64vCD6zBGGoIwegYiE3si8KLyw+swRDB6BCLw4hN7Q+s0AiIRe6NRehQweoIV+hkAQAAixeLwot1DMHoGIgGi8LB6BCIRgGLwsHoCIhGAohWA4tPBIvBwegYiEYEi8HB6BCIRgWLwcHoCIhGBohOB4tPCIvBwegYiEYIi8HB6BCIRgmLwcHoCIhGCohOC4tPDIvBwegYiEYMi8HB6BCIRg2LwcHoCIhGDohOD4tPEIvBwegYiEYQi8HB6BCIRhGLwcHoCIhGEohOE4tPFIvBwegYiEYUi8HB6BCIRhWLwcHoCIhGFohOF4tPGIvBwegYiEYYi8HB6BCIRhmLwcHoCIhGGohOG4tPHIvBwegYiEYci8HB6BCIRh2LwWpowegIagCIRh5XiE4f6IkPAACDxAxfXluL5V3CCADMzMzMzMzMzMzMzMzMVYvsVot1CGpoagBW6F8PAACDxAzHBmfmCWrHRgSFrme7x0YIcvNuPMdGDDr1T6XHRhB/Ug5Rx0YUjGgFm8dGGKvZgx" & _
                                                    "/HRhwZzeBbXl3CBABVi+zoCNn//7mghBwAgekAQBwAA8GLTQhRUP91EI1BZP91DGpAUI1BIFDosej//13CDADMzMzMzMzMzMzMzMzMVYvsg+xAjUXAUP91COi+AAAAajCNRcBQ/3UM6JAOAACDxAyL5V3CCADMzMzMzMzMVYvsVot1CGjIAAAAagBW6JwOAACDxAzHBtieBcHHRgRdnbvLx0YIB9V8NsdGDCopmmLHRhAX3XAwx0YUWgFZkcdGGDlZDvfHRhzY7C8Vx0YgMQvA/8dGJGcmM2fHRigRFVhox0Ysh0q0jsdGMKeP+WTHRjQNLgzbx0Y4pE/6vsdGPB1ItUdeXcIEAMzMzMzM6YsDAADMzMzMzMzMzMzMzFWL7IPsHItFCFONmMQAAABWi4DAAAAAV7+AAAAA9+eL8AMzi8aD0gAPpMIDweADiVX8iUX4iVX06MPX////dQi5cIYcAIHpAEAcAAPBUI1GEIt1CIPgfyv4V2oAagBogAAAAGiAAAAAU41GQFDobub//2oIjUXkx0XkAAAAAFBWx0XoAAAAAOj0AgAAi138i8OLVfiLysHoGIhF5IvDwegQiEXli8PB6AiIReaKRfSIReeLww+swRhqCMHoGIhN6IvDi8qIVesPrMEQwegQi8KITekPrNgIiEXqjUXkUFbB6wjomQIAAIteBIvDiw6JTfzB6BiLfQyIB4vDwegQiEcBi8PB6AiIRwKLww+swRiIXwPB6BiITwSLw4tN/A+swRDB6BCITwWLTfyLwQ+s2AiIRwaLxohPB8HrCItYCIvLi1AMi8LB6BiIRwiLwsHoEIhHCYvCwegIiEcKi8IPrMEYiFcLwegYiE8Mi8KLyw+swRDB6BCITw2Lww+s0AiIRw6" & _
                                                    "LxohfD8HqCItYEIvLi1AUi8LB6BiIRxCLwsHoEIhHEYvCwegIiEcSi8IPrMEYiFcTwegYiE8Ui8KLyw+swRDB6BCLw4hPFQ+s0AiIRxaLxsHqCIhfF4tYGIvLi1Aci8LB6BiIRxiLwsHoEIhHGYvCwegIiEcai8IPrMEYiFcbwegYiE8ci8KLyw+swRDB6BCITx2Lww+s0AiIRx6LxohfH8HqCItYIIvLi1Aki8LB6BiIRyCLwsHoEIhHIYvCwegIiEcii8IPrMEYiFcjwegYiE8ki8KLyw+swRDB6BCITyWLww+s0AiIRyaLxohfJ8HqCItYKIvLi1Asi8LB6BiIRyiLwsHoEIhHKYvCwegIiEcqi8IPrMEYiFcrwegYiE8si8KLyw+swRDB6BCLw4hPLQ+s0AjB6giIRy6LxohfL413OGjIAAAAagCLWDCLy4tQNIvCwegYiEcwi8LB6BCIRzGLwsHoCIhHMovCD6zBGIhXM8HoGIhPNIvCi8sPrMEQwegQiE81i8MPrNAIiEc2iF83i30IweoIV4tXPIvCi184i8vB6BiIBovCwegQiEYBi8LB6AiIRgKLwg+swRiIVgPB6BiITgSLwovLD6zBEMHoEIvDiE4FD6zQCIhGBsHqCIheB+ilCgAAg8QMX15bi+VdwggAzMzMzMzMzMzMVYvs6HjU//+5cIYcAIHpAEAcAAPBi00IUVD/dRCNgcQAAAD/dQxogAAAAFCNQUBQ6Bvk//9dwgwAzMzMzMzMzFWL7FaLdQj/dQyLDo1GCFD/dgSLQQT/0ItWLItGMAPWSF6ARAIIAXUTDx+AAAAAAIXAdAhIgEQCCAF09F3CCABVi+xTi10MVleLfQgPtkMYmYvIi/IPpM4ID7ZDGcHh" & _
                                                    "CJkLyAvyD6TOCA+2QxrB4QiZC8gL8g+kzggPtkMbweEImQvIC/IPtkMcD6TOCJnB4QgL8gvID7ZDHQ+kzgiZweEIC/ILyA+2Qx4PpM4ImcHhCAvyC8gPtkMfD6TOCJnB4QgL8gvIiXcEiQ8PtkMQmYvIi/IPtkMRD6TOCJnB4QgL8gvID7ZDEg+kzgiZweEIC/ILyA+2QxMPpM4ImcHhCAvyC8gPtkMUD6TOCJnB4QgLyAvyD6TOCA+2QxXB4QiZC8gL8g+kzggPtkMWweEImQvIC/IPpM4ID7ZDF8HhCJkLyAvyiU8IiXcMD7ZDCJmLyIvyD6TOCA+2QwnB4QiZC8gL8g+2QwoPpM4ImcHhCAvyC8gPtkMLD6TOCJnB4QgL8gvID7ZDDA+kzgiZweEIC/ILyA+2Qw0PpM4ImcHhCAvyC8gPtkMOD6TOCJnB4QgL8gvID7ZDDw+kzgiZweEIC/ILyIl3FIlPEA+2A5mLyIvyD7ZDAQ+kzgiZweEIC/ILyA+2QwIPpM4IweEImQvIC/IPtkMDD6TOCJnB4QgL8gvID7ZDBA+kzgiZweEIC/ILyA+2QwUPpM4ImcHhCAvyC8gPtkMGD6TOCJnB4QgL8gvID7ZDBw+kzgiZweEIC8gL8ol3HIlPGF9eW13CCADMzMxVi+yD7GCNReD/dQxQ6N79//+NReBQ6MUgAACFwHQIM8CL5V3CCACNReBQ6KDR//+D6IBQ6DcgAACD+AF0E+iN0f//g+iAUI1F4FBQ6G8rAABqAI1F4FDodNH//4PAQFCNRaBQ6CfT//+NRaBQ6O7S//+FwHWpikXAi00IJAEEAogBjUWgUI1BAVDoEQAAALgBAAAAi+VdwggAzMzMzMzMVYvsVot1CLEoV4t9D" & _
                                                    "A+2RweIRhgPtkcGiEYZiweLVwToa9f//4hGGrEgiweLVwToXNf//4hGG4sPi0cED6zBGIhOHIsPwegYi0cED6zBEIhOHYsPwegQi0cED6zBCIhOHrEowegID7YHiEYfD7ZHD4hGEA+2Rw6IRhGLRwiLVwzoC9f//4hGErEgi0cIi1cM6PvW//+IRhOLTwiLRwwPrMEYiE4Ui08IwegYi0cMD6zBEIhOFYtPCMHoEItHDA+swQiIThaxKMHoCA+2RwiIRhcPtkcXiEYID7ZHFohGCYtHEItXFOim1v//iEYKsSCLRxCLVxToltb//4hGC4tPEItHFA+swRiITgyLTxDB6BiLRxQPrMEQiE4Ni08QwegQi0cUD6zBCIhODrEowegID7ZHEIhGDw+2Rx+IBg+2Rx6IRgGLRxiLVxzoQtb//4hGArEgi0cYi1cc6DLW//+IRgOLTxiLRxwPrMEYwegYiE4Ei08Yi0ccD6zBEMHoEIhOBYtPGItHHA+swQjB6AiITgYPtkcYX4hGB15dwggAzMxVi+yD7CBTVot1CA9XwFeLfQzHReADAAAAx0XkAAAAAA8RReiNRwFmD9ZF+FBW6H37//9WjV4gU+jDJAAA6E7P//9QjUXgUFNT6OIkAABWU1PoeiQAAOg1z///UOgvz///g8AgUFNT6OQhAABT6O4FAACKBzP2iwskAQ+2wIPhAZk7yHUEO/J0DVPoAc///1BT6OooAABfXluL5V3CCADMVYvsgeygAAAAjYVg/////3UIUOhI/////3UMjUXgUOjs+v//agCNReBQjYVg////UI1FoFDodtD//41FoFD/dRDoev3//41FoFDoMdD///fYG8BAi+VdwgwAzMzMzMzMVYvsi00Ii8HB6A" & _
                                                    "eB4X9/f/8lAQEBAQPJa8AbM8FdwgQAzMzMzMzMzMzMzMzMzMzMVYvs6HjO//+5wHIcAIHpAEAcAAPBi00IUVD/dRCNQTD/dQxqEFCNQSBQ6CHe//9dwgwAzMzMzMzMzMzMzMzMzFWL7ItNCItFEAFBOINRPACJRRCJTQhd6aT////MzMzMVYvsVot1CIN+SAF1DVboLQAAAMdGSAIAAACLRRABRkBQ/3UMg1ZEAFbocv///15dwgwAzMzMzMzMzMzMzMzMzFWL7FaLdQiLTjCFyXQpuBAAAAArwVCNRiADwWoAUOjNAwAAg8QMjUYgUFboEAAAAMdGMAAAAABeXcIEAMzMzMxVi+yD7BCNRfBWV1D/dQzoDO///4t1CI1F8I1+EFdXUOhL7v//V1ZX6JPv//9fXovlXcIIAMzMzMzMzMzMzMzMVYvsg+wUU1aLdQiLRkiD+AF0BYP4AnUNVuhi////x0ZIAAAAAIteOItWPA+k2gNqCIvCweMDwegYi8uIReyLwsHoEIhF7YvCwegIiEXuD7bCiEXvi8IPrMEYiVX8wegYiE3wi8KLy4hd8w+swRDB6BCLw4hN8Q+s0AiIRfKNRexQweoIVuhW/v//i15Ai1ZED6TaA2oIi8LB4wPB6BiLy4hF7IvCwegQiEXti8LB6AiIRe4PtsKIRe+Lwg+swRiJVfzB6BiITfCLwovLiF3zD6zBEMHoEIvDiE3xD6zQCIhF8o1F7FDB6ghW6PH9////dQyNRhBQ6BXv//9eW4vlXcIIAMzMzMzMzMzMzMzMzMxVi+xWi3UIalBqAFboTwIAAIPEDFb/dQzos+3//8dGSAEAAABeXcIIAMzMzMzMzMxVi+yB7IAAAAC5IAAAAFOLXQxWV4vzjX2" & _
                                                    "A86W+/QAAAI1FgFBQ6JYWAACD/gJ0EIP+BHQLU41FgFBQ6DEDAACD7gF53It9CI11gLkgAAAA86VfXluL5V3CCADMzMzMzMxVi+xTVot1CFdW6AH9//+L2FPo+fz//4vQUujx/P//i/gz/ov3i8czw8HPCDPywcAIi87ByRAzwTPHM8ZfM8MzRQheW13CBADMzMzMzMzMzFWL7FaLdQj/Nuii/////3YEiQbomP////92CIlGBOiN/////3YMiUYI6IL///+JRgxeXcIEAMzMzMzMzMzMzMxVi+xTi10IVlcPtnsHD7ZDAg+2cwsPtlMPwecIC/gPtksDD7ZDDcHnCAv4weYID7ZDCMHnCAv4weIID7ZDBgvwweEID7ZDAcHmCAvwD7ZDDMHmCAvwD7ZDCgvQD7ZDBcHiCAvQD7YDweIIC9APtkMOC8iJUwwPtkMJweEIC8iJcwgPtkMEiXsEweEIXwvIXokLW13CBADMzMzMzMzMzMzMVYvsVuhnyv//i3UIBZMFAABQ/zboRxYAAIkG6FDK//8FkwUAAFD/dgToMhYAAIlGBOg6yv//BZMFAABQ/3YI6BwWAACJRgjoJMr//wWTBQAAUP92DOgGFgAAiUYMXl3CBADMzMzMzMzMzMzMzMzMzFWL7ItFCIvQVot1EIX2dBVXi30MK/iKDBeNUgGISv+D7gF18l9eXcPMzMzMzMzMzFWL7ItNEIXJdB8PtkUMVovxacABAQEBV4t9CMHpAvOri86D4QPzql9ei0UIXcPMzFWL7FaLdQhW6AP7//+L0IvOM9bByRDBwgjBzggz0TPWM8JeXcIEAMzMzMzMzMzMzFWL7FaLdQj/NujC/////3YEiQbouP////92CIlGBOit/////3YM" & _
                                                    "iUYI6KL///+JRgxeXcIEAMzMzMzMzMzMzMxVi+yD7EBWD1fAx0XAAQAAAFeNRcDHRcQAAAAAUA8RRcjHReABAAAAZg/WRdjHReQAAAAADxFF6GYP1kX46O7I//9QjUXAUOj0FQAAjUXAUOgLIAAAi30IjXD/g/4BdimNReBQUOg2HgAAVo1FwFDoDCQAAAvCdAtXjUXgUFDo7R0AAE6D/gF3141F4FBX6K0gAABfXovlXcIEAMzMzMzMVYvsgewAAQAAi0UMD1fAU1ZXuTwAAABmDxOFAP///421AP///8dF/BAAAACNvQj////zpYtNEI2dCP///4PBEIvTK8KJTfiJRQxmDx9EAACL+cdFEAQAAACL8w8fRAAA/3QYBP80GP939P938Oguzv//AUb4i0UMEVb8/3QYBP80GP93/P93+OgTzv//AQaLRQwRVgT/dBgE/zQY/3cE/zfo+s3//wFGCItFDBFWDP90GAT/NBj/dwz/dwjo383//wFGEI1/IItFDBFWFI12IINtEAF1iotN+IPDCINt/AEPhWr///8z9moAaib/dPWE/3T1gOinzf//AYT1AP///2oAEZT1BP///2om/3T1jP909YjoiM3//wGE9Qj///9qABGU9Qz///9qJv909ZT/dPWQ6GnN//8BhPUQ////agARlPUU////aib/dPWc/3T1mOhKzf//AYT1GP///2oAEZT1HP///2om/3T1pP909aDoK83//wGE9SD///8RlPUk////g8YFg/4PD4JZ////i10IjbUA////uSAAAACL+/OlU+gJ0P//U+gD0P//X15bi+VdwgwAzMzMzMzMzMzMzFWL7IPsEFNWi3UMV4t9GGoAVmoA/3UU6MTM//9qAFZqAFeJR" & _
                                                    "fCL2ui0zP//agD/dRCJRfSL8moAV+iizP//agD/dRCJRfxqAP91FIlV+OiNzP//i/iLRfQD+4PSAAP4E9Y71ncOcgQ7+HMIg0X8AINV+AGLRQgzyQtN8IkIM8kDVfyJeAQTTfhfXolQCIlIDFuL5V3CFADMzMzMzMzMzMxVi+yB7AgBAACNhXj///9TVlf/dQxQ6MUJAACNhXj///9Q6CnP//+NhXj///9Q6B3P//+NhXj///9Q6BHP//+Nvfj+//+7AgAAAGYPH0QAAIuNeP///4uFfP///4Hp7f8AAImN+P7//4PYAImF/P7//7gIAAAAZmYPH4QAAAAAAIt0B/iLTAf8i5QFeP///4l1+A+szhCLjAV8////g+YBx0QH/AAAAAAr1oPZAIHq//8AAImUBfj+//+D2QCJjAX8/v//D7dN+IlMB/iDwAiD+HhyrIuNaP///4uFbP///4tV8A+swRAPt4Vo////g+EBiYVo////K9HHhWz///8AAAAAi030uAEAAACD2QCB6v9/AACJlXD///+D2QCJjXT///8PrMoQg+IBwfkQK8JQjYX4/v//UI2FeP///1DorQcAAIPrAQ+FBP///4t1CDPSioTVeP///4uM1Xj///+IBFaLhNV8////D6zBCIhMVgFCwfgIg/oQctdfXluL5V3CCADMzMzMzMzMzMzMzMzMVYvsi0UIM9JWV4t9DCv4jXIRiwwHjUAEA0j8A9EPtsrB6giJSPyD7gF1519eXcIIAMzMzMzMzMzMzMzMzMzMzFWL7Fb/dQyLdQhW6LD///+NRkRQVui2AQAAXl3CCADMVYvsg+xEU1aLdQhXDxAGi0ZAiUX8DxFFvA8QRhAPEUXMDxBGIA8RRdwPEEYwDxFF7O" & _
                                                    "gKxP//BUQEAABQjUW8UOhb////i0X8jX2899CNVcwlgAAAACv+uQIAAACNWP/30MHoH8HrHyPY99sr1ovD99CJRQhmD27DZg9w0ABmD27Ai8ZmD3DYAA8fhAAAAAAAjUAgDxBA4A8QTAfgZg/bwmYP28tmD+vIDxFI4A8QQPAPEEwC4GYP28JmD9vLZg/ryA8RSPCD6QF1xo1WQI1xAYsMOo1SBCNNCIvDI0L8C8iJSvyD7gF16F9eW4vlXcIEAMzMzMzMzMzMzMzMzMzMzFWL7IPsRI1FvFZqRGoAUOhc+f//i3UIg8QMM8CLlqgAAACF0nQbZmYPH4QAAAAAAA+2jAaYAAAAiUyFvEA7wnLvjUW8x0SVvAEAAABQVuiN/v//XovlXcIEAMzMzMzMzFWL7FaLdQgzwDPSDx9EAAADBJYPtsiJDJZCwegIg/oQfO4DRkCLyMHoAoPhAzPSiU5AjQyAAwyWD7bBiQSWQsHpCIP6EHzuAU5AXl3CBADMVYvsg+xUi0UMjU2sU1aLdQgz2yvBx0X4EAAAAFeJRfAz0jP/M8CJVQiJVfyF23hRjUsBg/kCfDCLTfCNVayNDJkD0YsMho1S+A+vSggBTQiLTIYEg8ACD69KBAFN/I1L/zvBft6LVQg7w38Oi30Mi8sryIs8jw+vPIaLRfwDwgP4jUMBM9KJVQiLyIlV/IlF9IP4EX1yg334AnxDi1UMi8MrwY0UgoPCQA8fgAAAAACLBI6NUvgPr0IMjQSAweAGAUUIi0SOBIPBAg+vQgiNBIDB4AYBRfyD+RB81ItVCIP5EX0ai1UMi8MrwYtEgkQPrwSOi1UIjQSAweAGA/iLRfwDwgP4i0X0i034SYl8nayJTfiL2IP5/w+PAv///41" & _
                                                    "FrFDoif7//w8QRayLRexfDxEGDxBFvA8RRhAPEEXMDxFGIA8QRdwPEUYwiUZAXluL5V3CCADMzMzMzMzMzMzMzFWL7ItVDIPsRDPADx9EAAAPtgwQiUyFvECD+BB88o1FvMdF/AEAAABQ/3UI6J/8//+L5V3CCADMzMzMzMzMzMxVi+yB7HwBAABTVldqDP91DI1F4MZF3AAPV8DHReUAAAAAUGYP1kXdZsdF6QAAxkXrAOi59v//g8QMxkW8AI1F3MdF1QAAAAAPV8Bmx0XZAAAPEUW9agRQaiD/dQiNhTD///9mD9ZFzVDGRdsA6J7Y//9qII1FvFBQjYUw////UOjr0f//jUXMUI1FvFCNhYT+//9Q6Dfk//9qII1FvGoAUOh69v//ikW8g8QMjUW8aiBQUI2FMP///1DosdH//2ogjUW8agBQ6FT2//+KRbyDxAyLdRSNhYT+//8PV8DGRewAZg/WRe1W/3UQx0X1AAAAAFBmx0X5AADGRfsA6J7k//+LxvfYg+APUI1F7FCNhYT+//9Q6Ibk//+DfSQBi10ci30gU3UUV/91GI2FMP///1DoOdH//1NX6wP/dRiNhYT+//9Q6Fbk//+Lw/fYg+APUI1F7FCNhYT+//9Q6D7k//8z0ohd9IvGiVXoiEXsi8iLwg+swQhqEMHoCIhN7YvCi84PrMEQwegQiE3ui8KLzg+swRjB6BgPtsKIRfCLwsHoCIhF8YvCwegQiEXyweoYiE3vi8uIVfMz0ovCiVXoD6zBCMHoCIhN9YvCi8sPrMEQwegQiE32i8KLyw+swRjB6BgPtsKIRfiLwsHoCIhF+YvCwegQiEX6jUXsUI2FhP7//8HqGFCITfeIVfvojuP//4N9JAF1M/91KI2F" & _
                                                    "hP7//1DoKeL//2p8jYUw////agBQ6On0//+KhTD///+DxAwzwF9eW4vlXcIkAI1FrFCNhYT+//9Q6PXh//+LdSiNTayLwTLbuhAAAAAr8A8fQACKBA6NSQEyQf8K2IPqAXXwi0UchNt1RVBX/3UYjYUw////UOjYz///anyNhTD///9qAFDoePT//4qFMP///2oQjUWsagBQ6GX0//+KRayDxBgzwF9eW4vlXcIkAIXAdA5QagBX6Ef0//+KB4PEDGp8jYUw////agBQ6DL0//+KhTD///9qEI1FrGoAUOgf9P//ikWsg8QYuAEAAABfXluL5V3CJADMzMzMzMzMzMzMzFWL7FZXi30ID7YHmYvIi/IPtkcBD6TOCJnB4QgL8gvID7ZHAg+kzgiZweEIC/ILyA+2RwMPpM4ImcHhCAvyC8gPtkcED6TOCJnB4QgL8gvID7ZHBQ+kzgiZweEIC/ILyA+2RwYPpM4ImcHhCAvyC8gPtkcHD6TOCJnB4QgLwQvWX15dwgQAzMzMzMzMzMzMzFWL7IPsCItFEEj30JlTi10IiUX4i0UMiVX88w9+XfiNS3hWM/ZmD2zbjVB4O8F3SzvTckcr2MdFEBAAAABXZpCLPBiNQAiLdBj8i0j4i1D8M88jTfgz1iNV/DP5M/KJfBj4iXQY/DFI+DFQ/INtEAF1zl9eW4vlXcIMAIvTjUgQK9APEAzzjUkgDxBR0GYP79FmD9vTDyjCZg/vwQ8RBPODxgQPEEHQZg/v0A8RUdAPEEwK4A8QUeBmD+/RZg/b0w8owmYP78EPEUQK4A8QQeBmD+/CDxFB4IP+EHKlXluL5V3CDADMzMzMzMzMzMzMzFWL7ItVDItFCCvQVr4QAAAAiwwCjUAIiUj4i" & _
                                                    "0wC/IlI/IPuAXXrXl3CCADMzMzMzFWL7ItFEFZXg/gQdD+D+CB0Bv8V1LAcAIt1DIt9CGoQVlfo+fH//2oQjUYQUI1HEFDo6vH//4PEGOjiu///BTEEAACJRzBfXl3CDACLdQyLfQhqEFZX6MXx//9qEI1HEFZQ6Lnx//+DxBjosbv//wUgBAAAiUcwX15dwgwAzMzMVYvsg+xsi0UIjVWUU1a7oAAAADP2i0gEiU34i0gIiU30i0gMiU3oi0gQiU38i0gUiU3wi0gYiU3si00Mg8ECiXXcV4s4K9OLQByJfeCJReSJTdiJXQyJVdQPH4AAAAAAg/4QcykPtnH+D7ZB/8HmCAvwD7YBweYIC/APtkEBweYIC/CDwQSJNBqJTdjrVI1eAYPmD41D/YPgD419lI08t4tMhZSLw4PgD4vxwcYPi1SFlIvBwcANM/DB6Qoz8YvCi8rByAfBwQ4zyMHqA41D+DPKi10Mg+APA/EDdIWUAzeJN+i5uv//i338i9fByguLz8HBBzPRi8/ByQb31yN97DPRiwwYg8MEi0XwA8ojRfwDzot14DP4i9aJXQzByg2LxsHACgP5A33kM9CLxsHIAjPQi0X4i8gjxjPOI030M8iLReyJReQD0YtF8ItN+IlF7ItF/IlF8ItF6APHiXX4i3XcA/qLVdRGiUX8i0X0iU30i03YiUXoiX3giXXcgfugAQAAD4LX/v//i0UIi034i1X8AUgEi030AUgIAVAQATiLTeiLVfABSAwBUBSLVeyLTeQBUBgBSBz/QGBfXluL5V3CCADMzMzMzMzMzMzMzMxVi+yB7OAAAABTVot1CLugAQAAV4lduIsGiUXsi0YEiUXwi0YMi34IiUXgi0YQiUXUi0YUiUXQi0" & _
                                                    "YYiUW0i0YciUWwi0YgiUXoi0YkiUX0i0YoiUXMi0YsiUXIi0YwiUXEi0Y0iUXAi0Y4iUWsi0Y8i3UMiX3Yjb0g////iUWoM8Ar+4lF3Il9oA8fgAAAAACD+BBzH1boZfv//4vIg8YIi8KJTQyJReSJDB+JRB8E6RMBAACNUAHHRQwAAAAAjUL9g+APi4zFIP///4uExST///+JRfiLwoPgD4lN/I2NIP///4uUxSD///+L+oucxST///+LRdyD4A+JVbzB5xiNBMGLy4lFpIvCD6zICAlFDItFvMHpCAv5i8sPrMgBiX3ki/rR6TPSC9DB5x8xVQwL+YtFvItN5A+s2AczzzFFDItF/MHrBzPLM9uJTeSLTfiL0Q+kwQPB6h3B4AML2YtN+AvQi0X8i/gPrMgTiVW8M9IL0MHpE4tFvDPCwecNi1X8C/mLTfgz3w+sygYzwsHpBotVDDPZi03kA9CLRdwTy4PA+YPgDwOUxSD///8TjMUk////i0WkAxCJVQwTSASJEIlN5IlIBOgEuP//i1X0M/+LTeiL2g+kyhfB6wkL+sHhF4tV9AvZi03oiV38i9kPrNESiX34M/8L+cHqEjF9/DP/i03oweMOC9qLVfQxXfiL2Q+s0Q7B4xIL+cHqDjF9/Avai034i1W4M8uLXfyLfej31wMcEBNMEAQjfcSLVfSLRcj30iNF9CNVwDPQiU34i03MI03oi0X4M/mLTfAD3xPCA10ME0XkA12siV38E0WoM9uJRfiLReyL0A+syBzB4gTB6RwL2ItF7AvRi03wi/kPpMEeiVUMM9LB7wIL0cHgHgv4M98xVQwz0otN8Iv5i0XsD6TBGcHvBwvRweAZMVUMC/iLTdgz34tV4Iv5M33sI33UI03"
Private Const STR_THUNK3                As String = "sM1XwM/kjVdCLReAjRfCLTcQz0ItFDAPfi334E8KJTayLTcCLVfwDVbSJTagTfbCLTcwDXfyJTcSLTciJTcCLTeiJTcyLTfSJffSLfdSJfbSLfdCJfbCLfdiJfdSLfeCJfdCLfeyJTciLyBNN+ItF3Ild7ECLXbiJfdiDwwiLffCJfeCLfaCJVeiJTfCJRdyJXbiB+yAEAAAPghv9//+LdQiLReyLfdgBBotF4BFOBIvKAX4Ii320EUYMi0XUAUYQi0XQEUYUAX4Yi0WwEUYcAU4gi0X0EUYki0XMAUYoi0XIEUYsi0XEAUYwi0XAEUY0i02sAU44i02oEU48/4bAAAAAX15bi+VdwggAzMzMzMzMzMzMzMzMzMxVi+xTi10IVlcPtnsHD7ZDCg+2cwsPtlMPwecIC/gPtksDD7ZDDcHnCAv4weYID7YDwecIC/jB4ggPtkMOC/DB4QgPtkMBweYIC/APtkMEweYIC/APtkMCC9APtkMFweIIC9APtkMIweIIC9APtkMGC8iJewQPtkMJweEIC8iJcwgPtkMMweEIXwvIiVMMXokLW13CBADMzMzMzMzMzMzMVYvsi0UMUFD/dQjooOz//13CCADMzMzMzMzMzMzMzMxVi+yLRRBTVot1CI1IeFeLfQyNVng78XcEO9BzC41PeDvxdzA713IsK/i7EAAAACvwixQ4KxCLTDgEG0gEjUAIiVQw+IlMMPyD6wF15F9eW13CDACL141IEIveK9Ar2Cv+uAQAAACNdiCNSSAPEEHQDxBMN+BmD/vIDxFO4A8QTArgDxBB4GYP+8gPEUwL4IPoAXXSX15bXcIMAMzMzMzMVYvsVuh3tP//i3UIBYgEAABQ/zboVwAAAIkG6GC0//8FiAQA" & _
                                                    "AFD/dgToQgAAAIlGBOhKtP//BYgEAABQ/3YI6CwAAACJRgjoNLT//wWIBAAAUP92DOgWAAAAiUYMXl3CBADMzMzMzMzMzMzMzMzMzFWL7ItVDFOLXQiLw8HoGIvLVsHpCA+2yQ+2NBCLw8HoEA+2wA+2DBHB5ggPtgQQC8bB4AgLwQ+2y8HgCF5bD7YMEQvBXcIIAMzMzMzMzMzMVYvsi00MU4tdCFaDwxDHRQwEAAAAV4PBAw8fgAAAAAAPtkH+jVsgmY1JCIvwi/oPtkH1D6T3CJnB5ggD8Ilz0BP6iXvUD7ZB95mL8Iv6D7ZB+JkPpMIIweAIA/CJc9gT+ol73A+2QfqZi/CL+g+2QfkPpPcImcHmCAPwiXPgE/qJe+QPtkH8mYvwi/oPtkH7D6T3CJnB5ggD8Ilz6BP6g20MAYl77A+FdP///4tNCF9eW4FheP9/AADHQXwAAAAAXcIIAMzMzMzMzMzMzMzMzFWL7IPsCFOLXQwPV8BWV4t9EIsTi/KLQwSLyGYPE0X4AzcTTwQ78nUGO8h1BOsYO8h3D3IEO/JzCbgBAAAAM9LrC2YPE0X4i0X4i1X8i30IiU8Ei00QiTeLcQgDcwiLSQwTSwwD8BPKO3MIdQU7Swx0IDtLDHcQcgU7cwhzCbgBAAAAM9LrC2YPE0X4i1X8i0X4iU8Mi00QiXcIi3EQA3MQi0kUE0sUA/ATyjtzEHUFO0sUdCA7SxR3EHIFO3MQcwm4AQAAADPS6wtmDxNF+ItV/ItF+IlPFIl3EItLGItbHIlNDItNEItxGAN1DItJHBPLA/ATyjt1DHUEO8t0LDvLdx1yBTt1DHMWiXcYuAEAAACJTxwz0l9eW4vlXcIMAGYPE0X4i1X8i0X4iXcYiU8cX" & _
                                                    "15bi+VdwgwAzMzMzMzMVYvsi0UIxwAAAAAAx0AEAAAAAMdACAAAAADHQAwAAAAAx0AQAAAAAMdAFAAAAADHQBgAAAAAx0AcAAAAAF3CBADMzMzMzMzMzMzMzMzMzMxVi+yLTQy6AwAAAFOLXQhWK9mNQRhXiV0IDx+AAAAAAIs0A4tcAwSLeASLCDvfdy5yIjvxdyg733IadwQ78XIUi10Ig+gIg+oBedVfXjPAW13CCABfXoPI/1tdwggAX164AQAAAFtdwggAzMzMzMzMVYvsi1UIM8APH4QAAAAAAIsMwgtMwgR1D0CD+ARy8bgBAAAAXcIEADPAXcIEAMzMVYvsg+wQU4tdELlAAAAAVot1CCvLV4t9DGYPbsOJTRCLB4tXBIlF+IlV/PMPfk34Zg/zyGYP1g7o47b//4tNEIlF8ItHCIlV9ItXDIlF+IlV/PMPfk34Zg9uw2YP88jzD35F8GYP68hmD9ZOCOiutv//i00QiUXwi0cQiVX0i1cUiUX4iVX88w9+TfhmD27DZg/zyPMPfkXwZg/ryGYP1k4Q6Hm2//+LTRCJRfCLRxiJVfSLVxyJRfiJVfzzD35N+GYPbsNmD/PI8w9+RfBmD+vIZg/WThjoRLb//19eW4vlXcIMAMzMzMzMzMzMzMzMVYvsg+woU4tdCFZXi30MV1PoygcAAItHLA9XwIlF5ItHMIlF6ItHNIlF7ItHOIlF8ItHPIlF9I1F2GoBUFBmDxNF2MdF4AAAAADowf7//4vwjUXYUFNT6IT8//+LTzgD8ItHMItXPIlF5DPAC0c0iUXojUXYagFQUMdF4AAAAACJTeyJVfDHRfQAAAAA6H7+//8D8I1F2FBTU+hB/P//A/DHReQAAAAAi0cgD1fAiU" & _
                                                    "XYi0ckiUXci0coiUXgi0c4iUXwi0c8iUX0jUXYUFNTZg8TRejoB/z//4tPJAPwM8CJTdgLRyiJRdyLRzCLVzSLyolF+DPAC0csiUXgi0c4iUXoi0c8iUXsM8ALRyCJRfSNRdhQU1OJTeSJVfDov/v//4tPLAPwi1c0M8ALRzAPV8CJRdyLRyCJRfCNRdiJTdgzyQtPKFBTU4lV4MdF5AAAAABmDxNF6IlN9OhhCAAAi1ckK/CLRzAPV8CJRdixIItHNIlF3ItHOIlF4ItHPIlF5ItHIGYPE0Xo6KK0//8LVyyJRfCNRdhQU1OJVfToHggAAItVDCvwi080M8ALRziLXySJRdwzwAtHPIlN2ItPIDP/iUXgi0Ioi1IsiU3ksSDoO7T//wvYx0XwAAAAAIld6Av6i10MiX3si30Ii0MwiUX0jUXYUFdX6MMHAAAr8MdF4AAAAACLQziJRdiLQzyJRdyLQySJReSLQyiJReiLQyyJReyLQzSJRfSNRdhQV1fHRfAAAAAA6IQHAAAr8Hkg6Iut//9QV1fok/r//wPweO9fXluL5V3CCABmDx9EAACF9nURV+hmrf//UOgA/P//g/gBdNzoVq3//1BXV+g+BwAAK/Dr2szMzMzMzMzMzMxVi+xW/3UQi3UI/3UMVug9+v//C8J1Df91FFbowPv//4XAeAr/dRRWVugCBwAAXl3CEADMzMzMzMzMzMzMzMzMVYvsgeyIAAAAVot1DFbo/fv//4XAdA//dQjoMfv//16L5V3CDABXVo2FeP///1Do3AQAAIt9EI1FmFdQ6M8EAACNRdhQ6Ab7//+NRbjHRdgBAAAAUMdF3AAAAADo7/r//41FmFCNhXj///9Q6C/7//+L0IXSD4SwAQAAUw8" & _
                                                    "fQACLjXj///8PV8CD4QFmDxNF+IPJAHUvjYV4////UOgOBAAAi0XYg+ABg8gAD4S2AAAAV41F2FBQ6FT5//+L8Iva6agAAACLRZiD4AGDyAB1LI1FmFDo1wMAAItFuIPgAYPIAA+ECAEAAFeNRbhQUOgd+f//i/CL2un6AAAAhdIPjowAAACNRZhQjYV4////UFDo2wUAAI2FeP///1DojwMAAI1FuFCNRdhQ6HL6//+FwHkLV41F2FBQ6NP4//+NRbhQjUXYUFDopQUAAItF2IPgAYPIAHQRV41F2FBQ6K/4//+L8Iva6waLXfyLdfiNRdhQ6DoDAAAL8w+EkgAAAItF8IFN9AAAAICJRfDpgAAAAI2FeP///1CNRZhQUOhPBQAAjUWYUOgGAwAAjUXYUI1FuFDo6fn//4XAeQtXjUW4UFDoSvj//41F2FCNRbhQUOgcBQAAi0W4g+ABg8gAdBFXjUW4UFDoJvj//4vwi9rrBotd/It1+I1FuFDosQIAAAvzdA2LRdCBTdQAAACAiUXQjUWYUI2FeP///1DogPn//4vQhdIPhVb+//9bjUXYUP91COjZAgAAX16L5V3CDADMVYvsg+xAjUXA/3UQ/3UMUOh7AAAAjUXAUP91COjP+v//i+VdwgwAzMzMzMzMzMzMVYvsg+xAjUXA/3UMUOjOAgAAjUXAUP91COii+v//i+VdwggAzMzMzMzMzMzMzMzMVYvsVv91EIt1CP91DFboPQQAAAvCdAr/dRRWVuhP9///Xl3CEADMzMzMzMzMzMzMVYvsg+xgUw9XwFZmDxNF2ItF3FdmDxNF0DP/i13UiUX8M/aNR/2D/wQPV8BmDxNF9ItV9A9D8Dv3D4fSAAAAi00Qi8cPEEXQK8YP" & _
                                                    "EUXAjRzBi0X4iUXwiVX4Zg8fRAAAg/4ED4OjAAAA/3MEi0UM/zP/dPAE/zTwjUWwUOjf4v//g+wQi8yD7BAPEAAPEAiLxA8RAQ8QRcAPEU3gDxEAjUWgUOiosP//Zg9z2QwPEBBmD37IDyjCZg9z2AxmD37BDxFVwIlN/A8RVdA7yHcTcgiLRdg7RehzCbgBAAAAM8nrDg9XwGYPE0Xoi03si0Xoi1X4A9CLRfCJVfgTwUaD6wiJRfA79w+GVP///4td1OsDi0X4i00Ii3XQiTT5i/GLyovQiVXciVz+BEeLddiLXfyJddCJXdSJTdiJVfyD/wcPgtv+//+LRQhfiXA4XolYPFuL5V3CDADMzMzMzMzMzFWL7FZXi30IV+hCAAAAi/CF9nUGX15dwgQAi1T3+IvKi0T3/DP/C8h0E2YPH0QAAA+swgFH0eiLygvIdfPB5gaNRsADx19eXcIEAMzMzMzMVYvsi1UIuAMAAAAPH0QAAIsMwgtMwgR1BYPoAXnyQF3CBADMzMzMzMzMzMzMzMzMVYvsg+wIi0UID1fAU4vYZg8TRfiDwCA7w3Y4i034VleLffyJTQiLcPiD6AiLzotQBA+s0QELTQjR6gvXiQiL/olQBMHnH8dFCAAAAAA7w3fVX15bi+VdwgQAzMzMzMzMVYvsi1UMi00IiwKJAYtCBIlBBItCCIlBCItCDIlBDItCEIlBEItCFIlBFItCGIlBGItCHIlBHF3CCADMzMzMzFWL7IPsYFMPV8AzyVZmDxNF2ItF3FdmDxNF0It91IlN6IlF8DP2jUH9g/kED1fAZg8TRfiLXfwPQ/A78Q+HGQEAAItVDIvBDxBF0CvGiV30DxFFwI0EwotV+IlF7IlV/Iv5K/479w+H6" & _
                                                    "gAAAP9wBP8wi0UM/3TwBP808I1FsFDoXOD//w8QAA8RRdA793NDi03ci8GLVdSL+sHoHwFF/ItF2IPTAMHvHw+kwQGJXfQz2wPAC9kL+Ild3ItF0A+kwgGJfdgDwIlV1IlF0A8QRdDrBotd3It92IPsEIvEg+wQDxEAi8QPEEXADxEAjUWgUOjbrf//DxAIDyjBZg9z2AxmD37ADxFNwIlF8A8RTdA7w3cQcgU5fdhzCbgBAAAAM8nrDg9XwGYPE0Xgi03ki0Xgi1X8i130A9CLRewT2YlV/ItN6EaD6AiJXfSJRew78Q+GCv///4t91OsDi1X4i3UIi0XQiQTOi0XYiXzOBEGLffCJVdiL04lF0Il91IlV8IlV3IlN6IP5Bw+Clf7//4l+PF+JRjheW4vlXcIIAMzMVYvsg+wMU4tdDA9XwFZXi30QixOL8otDBIvIZg8TRfQrNxtPBDvydQY7yHUE6xg7yHIPdwQ78nYJuAEAAAAz0usLZg8TRfSLRfSLVfiLfQiJTwSLTRCJN4tzCIl1+CtxCItLDItdEBtLDCvwi10MG8o7dfh1BTtLDHQgO0sMchB3BTtzCHYJuAEAAAAz0usLZg8TRfSLVfiLRfSJTwyLTRCJdwiLcxCJdfwrcRCLSxSLXRAbSxQr8ItdDBvKO3X8dQU7SxR0IDtLFHIQdwU7cxB2CbgBAAAAM9LrC2YPE0X0i1X4i0X0iU8UiXcQi0sYi/GLfRCLWxyJTQyLTRArcRiLyxtPHCvwi30IG8o7dQx1BDvLdCw7y3IddwU7dQx2Fol3GLgBAAAAiU8cM9JfXluL5V3CDABmDxNF9ItV+ItF9Il3GIlPHF9eW4vlXcIMAMzMzMzMzMzMzMzMzMzMzFWL7ItNCD" & _
                                                    "PSVleLfQwz9ovHg+A/D6vGg/ggD0PWM/KD+EAPQ9bB7wYjNPkjVPkEi8ZfXl3CCADMzMzMzMzMzMxVi+yLVRSD7BAzyYXSD4TCAAAAU4tdEFaLdQhXi30Mg/ogD4KLAAAAjUP/A8I78HcJjUb/A8I7w3N5jUf/A8I78HcJjUb/A8I7x3Nni8KL1yvTg+DgiVX8i9Yr04lF8IlV+IvDi134i9eLffwr1olV9I1WEA8QAIt19IPBII1AII1SIA8QTAfgZg/vyA8RTAPgDxBMFuCLdQgPEEDwZg/vyA8RSuA7TfByyotVFIt9DItdEDvKcxsr+40EGSvzK9GKDDiNQAEySP+ITDD/g+oBde5fXluL5V3CEAAAAA==" ' 23725, 18.4.2020 22:09:32
Private Const CF_SHA256_HASHSZ          As Long = 32
Private Const CF_SHA256_BLOCKSZ         As Long = 64
Private Const CF_SHA384_HASHSZ          As Long = 48
Private Const CF_SHA384_BLOCKSZ         As Long = 128
Private Const CF_SHA384_CONTEXTSZ       As Long = 200
Private Const LNG_HMAC_INNER_PAD        As Long = &H36
Private Const LNG_HMAC_OUTER_PAD        As Long = &H5C
Private Const LNG_CHACHA20POLY1305_TAG_SIZE As Long = 16
Private Const LNG_AESGCM_TAG_SIZE       As Long = 16

Private m_uData                    As UcsThunkData

Private Enum UcsThunkPfnIndexEnum
    ucsPfnSecp256r1MakeKey
    ucsPfnSecp256r1SharedSecret
    ucsPfnCurve25519ScalarMultiply
    ucsPfnCurve25519ScalarMultBase
    ucsPfnSha256Init
    ucsPfnSha256Update
    ucsPfnSha256Final
    ucsPfnSha384Init
    ucsPfnSha384Update
    ucsPfnSha384Final
    ucsPfnChacha20Poly1305Encrypt
    ucsPfnChacha20Poly1305Decrypt
    ucsPfnAesGcmEncrypt
    ucsPfnAesGcmDecrypt
    [_ucsPfnMax]
End Enum

Private Type UcsThunkData
    Thunk               As Long
    Glob()              As Byte
    Pfn(0 To [_ucsPfnMax] - 1) As Long
    EccKeySize          As Long
    HashCtx(0 To CF_SHA384_CONTEXTSZ - 1) As Byte
    HashPad(0 To CF_SHA384_BLOCKSZ - 1) As Byte
    HashFinal(0 To CF_SHA384_HASHSZ - 1) As Byte
End Type

'=========================================================================
' Functions
'=========================================================================

Public Function InitThunks() As Boolean
    Dim lOffset         As Long
    Dim lIdx            As Long
    
    If m_uData.Thunk = 0 Then
    With m_uData
        .EccKeySize = 32
        '--- prepare thunk/context in executable memory
        .Thunk = pvThunkAllocate(STR_THUNK1 & STR_THUNK2 & STR_THUNK3)
        If .Thunk = 0 Then
            GoTo QH
        End If
        ReDim .Glob(0 To (Len(STR_GLOB) \ 4) * 3 - 1) As Byte
        pvThunkAllocate STR_GLOB, VarPtr(.Glob(0))
        '--- init pfns from thunk addr + offsets stored at beginning of it
        For lIdx = 0 To UBound(.Pfn)
            Call CopyMemory(lOffset, ByVal UnsignedAdd(.Thunk, 4 * lIdx), 4)
            .Pfn(lIdx) = UnsignedAdd(.Thunk, lOffset)
        Next
        '--- init pfns trampolines
        Call pvPatchProto(AddressOf pvCryptoCallSecp256r1MakeKey)
        Call pvPatchProto(AddressOf pvCryptoCallSecp256r1SharedSecret)
        Call pvPatchProto(AddressOf pvCryptoCallCurve25519Multiply)
        Call pvPatchProto(AddressOf pvCryptoCallCurve25519MulBase)
        Call pvPatchProto(AddressOf pvCryptoCallSha256Init)
        Call pvPatchProto(AddressOf pvCryptoCallSha256Update)
        Call pvPatchProto(AddressOf pvCryptoCallSha256Final)
        Call pvPatchProto(AddressOf pvCryptoCallSha384Init)
        Call pvPatchProto(AddressOf pvCryptoCallSha384Update)
        Call pvPatchProto(AddressOf pvCryptoCallSha384Final)
        Call pvPatchProto(AddressOf pvCryptoCallChacha20Poly1305Encrypt)
        Call pvPatchProto(AddressOf pvCryptoCallChacha20Poly1305Decrypt)
        Call pvPatchProto(AddressOf pvCryptoCallAesGcmEncrypt)
        Call pvPatchProto(AddressOf pvCryptoCallAesGcmDecrypt)
        '--- init thunk's first 4 bytes -> global data in C/C++
        Call CopyMemory(ByVal .Thunk, VarPtr(.Glob(0)), 4)
    End With
    End If
    '--- success
    InitThunks = True
QH:
End Function

Public Function EccSecp256r1MakeKey(baPrivate() As Byte, baPublic() As Byte) As Boolean
    Const MAX_RETRIES   As Long = 16
    Dim lIdx            As Long
    
    ReDim baPrivate(0 To m_uData.EccKeySize - 1) As Byte
    ReDim baPublic(0 To m_uData.EccKeySize) As Byte
    For lIdx = 1 To MAX_RETRIES
        pvCryptoRandomBytes VarPtr(baPrivate(0)), m_uData.EccKeySize
        If pvCryptoCallSecp256r1MakeKey(m_uData.Pfn(ucsPfnSecp256r1MakeKey), baPublic(0), baPrivate(0)) = 1 Then
            Exit For
        End If
    Next
    '--- success (or failure)
    EccSecp256r1MakeKey = (lIdx <= MAX_RETRIES)
End Function

Public Function EccSecp256r1SharedSecret(baPrivate() As Byte, baPublic() As Byte) As Byte()
    Dim baRetVal()      As Byte
    
    Debug.Assert UBound(baPrivate) >= m_uData.EccKeySize - 1
    Debug.Assert UBound(baPublic) >= m_uData.EccKeySize
    ReDim baRetVal(0 To m_uData.EccKeySize - 1) As Byte
    If pvCryptoCallSecp256r1SharedSecret(m_uData.Pfn(ucsPfnSecp256r1SharedSecret), baPublic(0), baPrivate(0), baRetVal(0)) = 0 Then
        GoTo QH
    End If
    EccSecp256r1SharedSecret = baRetVal
QH:
End Function

Public Function EccCurve25519MakeKey(baPrivate() As Byte, baPublic() As Byte) As Boolean
    ReDim baPrivate(0 To m_uData.EccKeySize - 1) As Byte
    ReDim baPublic(0 To m_uData.EccKeySize - 1) As Byte
    pvCryptoRandomBytes VarPtr(baPrivate(0)), m_uData.EccKeySize
    baPrivate(0) = baPrivate(0) And 248
    baPrivate(UBound(baPrivate)) = (baPrivate(UBound(baPrivate)) And 127) Or 64
    pvCryptoCallCurve25519MulBase m_uData.Pfn(ucsPfnCurve25519ScalarMultBase), baPublic(0), baPrivate(0)
    '--- success
    EccCurve25519MakeKey = True
End Function

Public Function EccCurve25519SharedSecret(baPrivate() As Byte, baPublic() As Byte) As Byte()
    Dim baRetVal()      As Byte
    
    Debug.Assert UBound(baPrivate) >= m_uData.EccKeySize - 1
    Debug.Assert UBound(baPublic) >= m_uData.EccKeySize - 1
    ReDim baRetVal(0 To m_uData.EccKeySize - 1) As Byte
    pvCryptoCallCurve25519Multiply m_uData.Pfn(ucsPfnCurve25519ScalarMultiply), baRetVal(0), baPrivate(0), baPublic(0)
    EccCurve25519SharedSecret = baRetVal
End Function

Public Function HashSha256(baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim baRetVal()      As Byte
    
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        pvCryptoCallSha256Init .Pfn(ucsPfnSha256Init), lCtxPtr
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, lPtr, lSize
        ReDim baRetVal(0 To CF_SHA256_HASHSZ - 1) As Byte
        pvCryptoCallSha256Final .Pfn(ucsPfnSha256Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    HashSha256 = baRetVal
End Function

Public Function HashSha384(baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim baRetVal()      As Byte
    
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        pvCryptoCallSha384Init .Pfn(ucsPfnSha384Init), lCtxPtr
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, lPtr, lSize
        ReDim baRetVal(0 To CF_SHA384_HASHSZ - 1) As Byte
        pvCryptoCallSha384Final .Pfn(ucsPfnSha384Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    HashSha384 = baRetVal
End Function

Public Function HmacSha256(baKey() As Byte, baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim lIdx            As Long
    
    Debug.Assert UBound(baKey) < CF_SHA256_BLOCKSZ
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        '-- inner hash
        pvCryptoCallSha256Init .Pfn(ucsPfnSha256Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA256_BLOCKSZ, LNG_HMAC_INNER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_INNER_PAD
        Next
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA256_BLOCKSZ
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, lPtr, lSize
        pvCryptoCallSha256Final .Pfn(ucsPfnSha256Final), lCtxPtr, VarPtr(.HashFinal(0))
        '-- outer hash
        pvCryptoCallSha256Init .Pfn(ucsPfnSha256Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA256_BLOCKSZ, LNG_HMAC_OUTER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_OUTER_PAD
        Next
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA256_BLOCKSZ
        pvCryptoCallSha256Update .Pfn(ucsPfnSha256Update), lCtxPtr, VarPtr(.HashFinal(0)), CF_SHA256_HASHSZ
        ReDim baRetVal(0 To CF_SHA256_HASHSZ - 1) As Byte
        pvCryptoCallSha256Final .Pfn(ucsPfnSha256Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    HmacSha256 = baRetVal
End Function

Public Function HmacSha384(baKey() As Byte, baInput() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Byte()
    Dim lCtxPtr         As Long
    Dim lPtr            As Long
    Dim lIdx            As Long
    
    Debug.Assert UBound(baKey) < CF_SHA384_BLOCKSZ
    With m_uData
        lCtxPtr = VarPtr(.HashCtx(0))
        If lSize > 0 Then
            lPtr = VarPtr(baInput(lPos))
        End If
        '-- inner hash
        pvCryptoCallSha384Init .Pfn(ucsPfnSha384Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA384_BLOCKSZ, LNG_HMAC_INNER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_INNER_PAD
        Next
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA384_BLOCKSZ
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, lPtr, lSize
        pvCryptoCallSha384Final .Pfn(ucsPfnSha384Final), lCtxPtr, VarPtr(.HashFinal(0))
        '-- outer hash
        pvCryptoCallSha384Init .Pfn(ucsPfnSha384Init), lCtxPtr
        Call FillMemory(.HashPad(0), CF_SHA384_BLOCKSZ, LNG_HMAC_OUTER_PAD)
        For lIdx = 0 To UBound(baKey)
            .HashPad(lIdx) = baKey(lIdx) Xor LNG_HMAC_OUTER_PAD
        Next
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, VarPtr(.HashPad(0)), CF_SHA384_BLOCKSZ
        pvCryptoCallSha384Update .Pfn(ucsPfnSha384Update), lCtxPtr, VarPtr(.HashFinal(0)), CF_SHA384_HASHSZ
        ReDim baRetVal(0 To CF_SHA384_HASHSZ - 1) As Byte
        pvCryptoCallSha384Final .Pfn(ucsPfnSha384Final), lCtxPtr, VarPtr(baRetVal(0))
    End With
    HmacSha384 = baRetVal
End Function

Public Function AeadChacha20Poly1305Encrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    Call pvCryptoCallChacha20Poly1305Encrypt(m_uData.Pfn(ucsPfnChacha20Poly1305Encrypt), _
            baKey(0), baNonce(0), _
            baAad(lAadPos), lAdSize, _
            baBuffer(lPos), lSize, _
            baBuffer(lPos), baBuffer(lPos + lSize))
    '--- success
    AeadChacha20Poly1305Encrypt = True
End Function

Public Function AeadChacha20Poly1305Decrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    If pvCryptoCallChacha20Poly1305Decrypt(m_uData.Pfn(ucsPfnChacha20Poly1305Decrypt), _
            baKey(0), baNonce(0), _
            baAad(lAadPos), lAdSize, _
            baBuffer(lPos), lSize - LNG_CHACHA20POLY1305_TAG_SIZE, _
            baBuffer(lPos + lSize - LNG_CHACHA20POLY1305_TAG_SIZE), baBuffer(lPos)) = 0 Then
        '--- success
        AeadChacha20Poly1305Decrypt = True
    End If
End Function

Public Function AeadAesGcmEncrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    Call pvCryptoCallAesGcmEncrypt(m_uData.Pfn(ucsPfnAesGcmEncrypt), _
            baBuffer(lPos), baBuffer(lPos + lSize), _
            baBuffer(lPos), lSize, _
            baAad(lAadPos), lAdSize, _
            baNonce(0), baKey(0), UBound(baKey) + 1)
    '--- success
    AeadAesGcmEncrypt = True
End Function

Public Function AeadAesGcmDecrypt( _
            baNonce() As Byte, baKey() As Byte, _
            baAad() As Byte, ByVal lAadPos As Long, ByVal lAdSize As Long, _
            baBuffer() As Byte, ByVal lPos As Long, ByVal lSize As Long) As Boolean
    If pvCryptoCallAesGcmDecrypt(m_uData.Pfn(ucsPfnAesGcmDecrypt), _
            baBuffer(lPos), _
            baBuffer(lPos), lSize - LNG_AESGCM_TAG_SIZE, _
            baBuffer(lPos + lSize - LNG_AESGCM_TAG_SIZE), _
            baAad(lAadPos), lAdSize, _
            baNonce(0), baKey(0), UBound(baKey) + 1) = 0 Then
        '--- success
        AeadAesGcmDecrypt = True
    End If
End Function

'= private ===============================================================

Private Function pvCryptoCallSecp256r1MakeKey(ByVal Pfn As Long, pPubKeyPtr As Byte, pPrivKeyPtr As Byte) As Long
    ' int ecc_make_key(uint8_t p_publicKey[ECC_BYTES+1], uint8_t p_privateKey[ECC_BYTES]);
End Function

Private Function pvCryptoCallSecp256r1SharedSecret(ByVal Pfn As Long, pPubKeyPtr As Byte, pPrivKeyPtr As Byte, pSecretPtr As Byte) As Long
    ' int ecdh_shared_secret(const uint8_t p_publicKey[ECC_BYTES+1], const uint8_t p_privateKey[ECC_BYTES], uint8_t p_secret[ECC_BYTES]);
End Function

Private Function pvCryptoCallCurve25519Multiply(ByVal Pfn As Long, pSecretPtr As Byte, pPubKeyPtr As Byte, pPrivKeyPtr As Byte) As Long
    ' void cf_curve25519_mul(uint8_t out[32], const uint8_t priv[32], const uint8_t pub[32])
End Function

Private Function pvCryptoCallCurve25519MulBase(ByVal Pfn As Long, pPubKeyPtr As Byte, pPrivKeyPtr As Byte) As Long
    ' void cf_curve25519_mul_base(uint8_t out[32], const uint8_t priv[32])
End Function

Private Function pvCryptoCallSha256Init(ByVal Pfn As Long, ByVal lCtxPtr As Long) As Long
    ' void cf_sha256_init(cf_sha256_context *ctx)
End Function

Private Function pvCryptoCallSha256Update(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lDataPtr As Long, ByVal lSize As Long) As Long
    ' void cf_sha256_update(cf_sha256_context *ctx, const void *data, size_t nbytes)
End Function

Private Function pvCryptoCallSha256Final(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lHashPtr As Long) As Long
    ' void cf_sha256_digest_final(cf_sha256_context *ctx, uint8_t hash[CF_SHA256_HASHSZ])
End Function

Private Function pvCryptoCallSha384Init(ByVal Pfn As Long, ByVal lCtxPtr As Long) As Long
    ' void cf_sha384_init(cf_sha384_context *ctx)
End Function

Private Function pvCryptoCallSha384Update(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lDataPtr As Long, ByVal lSize As Long) As Long
    ' void cf_sha384_update(cf_sha384_context *ctx, const void *data, size_t nbytes)
End Function

Private Function pvCryptoCallSha384Final(ByVal Pfn As Long, ByVal lCtxPtr As Long, ByVal lHashPtr As Long) As Long
    ' void cf_sha384_digest_final(cf_sha384_context *ctx, uint8_t hash[CF_SHA384_HASHSZ])
End Function

Private Function pvCryptoCallChacha20Poly1305Encrypt( _
            ByVal Pfn As Long, pKeyPtr As Byte, pNoncePtr As Byte, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, _
            pPlaintTextPtr As Byte, ByVal lPlaintTextSize As Long, _
            pCipherTextPtr As Byte, pTagPtr As Byte) As Long
    ' void cf_chacha20poly1305_encrypt(const uint8_t key[32], const uint8_t nonce[12], const uint8_t *header, size_t nheader,
    '                                  const uint8_t *plaintext, size_t nbytes, uint8_t *ciphertext, uint8_t tag[16])
End Function

Private Function pvCryptoCallChacha20Poly1305Decrypt( _
            ByVal Pfn As Long, pKeyPtr As Byte, pNoncePtr As Byte, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, _
            pCipherTextPtr As Byte, ByVal lCipherTextSize As Long, _
            pTagPtr As Byte, pPlaintTextPtr As Byte) As Long
    ' int cf_chacha20poly1305_decrypt(const uint8_t key[32], const uint8_t nonce[12], const uint8_t *header, size_t nheader,
    '                                 const uint8_t *ciphertext, size_t nbytes, const uint8_t tag[16], uint8_t *plaintext)
End Function

Private Function pvCryptoCallAesGcmEncrypt( _
            ByVal Pfn As Long, pCipherTextPtr As Byte, pTagPtr As Byte, pPlaintTextPtr As Byte, ByVal lPlaintTextSize As Long, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, pNoncePtr As Byte, pKeyPtr As Byte, ByVal lKeySize As Long) As Long
    ' void cf_aesgcm_encrypt(uint8_t *c, uint8_t *mac, const uint8_t *m, const size_t mlen, const uint8_t *ad, const size_t adlen,
    '                        const uint8_t *npub, const uint8_t *k, size_t klen)
End Function

Private Function pvCryptoCallAesGcmDecrypt( _
            ByVal Pfn As Long, pPlaintTextPtr As Byte, pCipherTextPtr As Byte, ByVal lCipherTextSize As Long, pTagPtr As Byte, _
            pHeaderPtr As Byte, ByVal lHeaderSize As Long, pNoncePtr As Byte, pKeyPtr As Byte, ByVal lKeySize As Long) As Long
    ' void cf_aesgcm_decrypt(uint8_t *m, const uint8_t *c, const size_t clen, const uint8_t *mac, const uint8_t *ad, const size_t adlen,
    '                        const uint8_t *npub, const uint8_t *k, const size_t klen)
End Function

Private Sub pvCryptoRandomBytes(ByVal lPtr As Long, ByVal lSize As Long)
    Dim hProv           As Long
    
    If CryptAcquireContext(hProv, 0, 0, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) <> 0 Then
        Call CryptGenRandom(hProv, lSize, lPtr)
        Call CryptReleaseContext(hProv, 0)
    End If
End Sub

Private Function pvThunkAllocate(sText As String, Optional ByVal ThunkPtr As Long) As Long
    Static Map(0 To &H3FF) As Long
    Dim baInput()       As Byte
    Dim lIdx            As Long
    Dim lChar           As Long
    Dim lPtr            As Long
    
    If ThunkPtr <> 0 Then
        pvThunkAllocate = ThunkPtr
    Else
        pvThunkAllocate = VirtualAlloc(0, (Len(sText) \ 4) * 3, MEM_COMMIT, PAGE_EXECUTE_READWRITE)
        If pvThunkAllocate = 0 Then
            Exit Function
        End If
    End If
    '--- init decoding maps
    If Map(65) = 0 Then
        baInput = StrConv("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", vbFromUnicode)
        For lIdx = 0 To UBound(baInput)
            lChar = baInput(lIdx)
            Map(&H0 + lChar) = lIdx * (2 ^ 2)
            Map(&H100 + lChar) = (lIdx And &H30) \ (2 ^ 4) Or (lIdx And &HF) * (2 ^ 12)
            Map(&H200 + lChar) = (lIdx And &H3) * (2 ^ 22) Or (lIdx And &H3C) * (2 ^ 6)
            Map(&H300 + lChar) = lIdx * (2 ^ 16)
        Next
    End If
    '--- base64 decode loop
    baInput = StrConv(Replace(Replace(sText, vbCr, vbNullString), vbLf, vbNullString), vbFromUnicode)
    lPtr = pvThunkAllocate
    For lIdx = 0 To UBound(baInput) - 3 Step 4
        lChar = Map(baInput(lIdx + 0)) Or Map(&H100 + baInput(lIdx + 1)) Or Map(&H200 + baInput(lIdx + 2)) Or Map(&H300 + baInput(lIdx + 3))
        Call CopyMemory(ByVal lPtr, lChar, 3)
        lPtr = UnsignedAdd(lPtr, 3)
    Next
End Function

Private Sub pvPatchProto(ByVal Pfn As Long)
    Dim bInIDE          As Boolean
 
    Debug.Assert pvSetTrue(bInIDE)
    If bInIDE Then
        Call CopyMemory(Pfn, ByVal UnsignedAdd(Pfn, &H16), 4)
    Else
        Call VirtualProtect(Pfn, 8, PAGE_EXECUTE_READWRITE, 0)
    End If
    ' 0:  58                      pop    eax
    ' 1:  59                      pop    ecx
    ' 2:  50                      push   eax
    ' 3:  ff e1                   jmp    ecx
    ' 5:  90                      nop
    ' 6:  90                      nop
    ' 7:  90                      nop
    Call CopyMemory(ByVal Pfn, -802975883527609.7192@, 8)
End Sub

Private Function pvSetTrue(bValue As Boolean) As Boolean
    bValue = True
    pvSetTrue = True
End Function

Private Function UnsignedAdd(ByVal lUnsignedPtr As Long, ByVal lSignedOffset As Long) As Long
    '--- note: safely add *signed* offset to *unsigned* ptr for *unsigned* retval w/o overflow in LARGEADDRESSAWARE processes
    UnsignedAdd = ((lUnsignedPtr Xor &H80000000) + lSignedOffset) Xor &H80000000
End Function
